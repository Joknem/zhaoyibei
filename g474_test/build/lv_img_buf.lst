ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"lv_img_buf.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "lvgl/src/draw/lv_img_buf.c"
  20              		.section	.text.lv_color_to32,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	lv_color_to32:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 2 "lvgl/src/draw/../misc/lv_color.h"
   1:lvgl/src/draw/../misc/lv_color.h **** /**
   2:lvgl/src/draw/../misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/draw/../misc/lv_color.h ****  *
   4:lvgl/src/draw/../misc/lv_color.h ****  */
   5:lvgl/src/draw/../misc/lv_color.h **** 
   6:lvgl/src/draw/../misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/draw/../misc/lv_color.h **** 
   9:lvgl/src/draw/../misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_color.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_color.h **** #endif
  12:lvgl/src/draw/../misc/lv_color.h **** 
  13:lvgl/src/draw/../misc/lv_color.h **** /*********************
  14:lvgl/src/draw/../misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_color.h **** #include "lv_assert.h"
  18:lvgl/src/draw/../misc/lv_color.h **** #include "lv_math.h"
  19:lvgl/src/draw/../misc/lv_color.h **** #include "lv_types.h"
  20:lvgl/src/draw/../misc/lv_color.h **** 
  21:lvgl/src/draw/../misc/lv_color.h **** /*Error checking*/
  22:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:lvgl/src/draw/../misc/lv_color.h **** #endif
  25:lvgl/src/draw/../misc/lv_color.h **** 
  26:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:lvgl/src/draw/../misc/lv_color.h **** #endif
  29:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 2


  30:lvgl/src/draw/../misc/lv_color.h **** #include <stdint.h>
  31:lvgl/src/draw/../misc/lv_color.h **** 
  32:lvgl/src/draw/../misc/lv_color.h **** /*********************
  33:lvgl/src/draw/../misc/lv_color.h ****  *      DEFINES
  34:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  35:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:lvgl/src/draw/../misc/lv_color.h **** 
  38:lvgl/src/draw/../misc/lv_color.h **** /**
  39:lvgl/src/draw/../misc/lv_color.h ****  * Opacity percentages.
  40:lvgl/src/draw/../misc/lv_color.h ****  */
  41:lvgl/src/draw/../misc/lv_color.h **** enum {
  42:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  43:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_0      = 0,
  44:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_10     = 25,
  45:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_20     = 51,
  46:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_30     = 76,
  47:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_40     = 102,
  48:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_50     = 127,
  49:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_60     = 153,
  50:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_70     = 178,
  51:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_80     = 204,
  52:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_90     = 229,
  53:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_100    = 255,
  54:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_COVER  = 255,
  55:lvgl/src/draw/../misc/lv_color.h **** };
  56:lvgl/src/draw/../misc/lv_color.h **** 
  57:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:lvgl/src/draw/../misc/lv_color.h **** 
  60:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  62:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  64:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 16
  66:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 32
  68:lvgl/src/draw/../misc/lv_color.h **** #else
  69:lvgl/src/draw/../misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:lvgl/src/draw/../misc/lv_color.h **** #endif
  71:lvgl/src/draw/../misc/lv_color.h **** 
  72:lvgl/src/draw/../misc/lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:lvgl/src/draw/../misc/lv_color.h **** /**
  74:lvgl/src/draw/../misc/lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:lvgl/src/draw/../misc/lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:lvgl/src/draw/../misc/lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:lvgl/src/draw/../misc/lv_color.h **** */
  78:lvgl/src/draw/../misc/lv_color.h **** #ifdef _MSC_VER
  79:lvgl/src/draw/../misc/lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:lvgl/src/draw/../misc/lv_color.h **** #endif
  82:lvgl/src/draw/../misc/lv_color.h **** #else
  83:lvgl/src/draw/../misc/lv_color.h **** #if __cplusplus >= 201103L
  84:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:lvgl/src/draw/../misc/lv_color.h **** #endif
  86:lvgl/src/draw/../misc/lv_color.h **** #endif
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 3


  87:lvgl/src/draw/../misc/lv_color.h **** #endif /*__cplusplus*/
  88:lvgl/src/draw/../misc/lv_color.h **** 
  89:lvgl/src/draw/../misc/lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:lvgl/src/draw/../misc/lv_color.h **** #endif
  92:lvgl/src/draw/../misc/lv_color.h **** 
  93:lvgl/src/draw/../misc/lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:lvgl/src/draw/../misc/lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:lvgl/src/draw/../misc/lv_color.h **** #else
  97:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:lvgl/src/draw/../misc/lv_color.h **** #endif
  99:lvgl/src/draw/../misc/lv_color.h **** 
 100:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 101:lvgl/src/draw/../misc/lv_color.h ****  * Macros for all existing color depths
 102:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 103:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 104:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:lvgl/src/draw/../misc/lv_color.h **** 
 109:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:lvgl/src/draw/../misc/lv_color.h **** 
 114:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:lvgl/src/draw/../misc/lv_color.h **** 
 117:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:lvgl/src/draw/../misc/lv_color.h **** 
 122:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:lvgl/src/draw/../misc/lv_color.h **** 
 127:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:lvgl/src/draw/../misc/lv_color.h **** 
 130:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:lvgl/src/draw/../misc/lv_color.h **** #else
 134:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:lvgl/src/draw/../misc/lv_color.h **** #endif
 136:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:lvgl/src/draw/../misc/lv_color.h **** 
 139:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:lvgl/src/draw/../misc/lv_color.h **** #else
 143:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 4


 144:lvgl/src/draw/../misc/lv_color.h **** #endif
 145:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:lvgl/src/draw/../misc/lv_color.h **** 
 148:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:lvgl/src/draw/../misc/lv_color.h **** #else
 152:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:lvgl/src/draw/../misc/lv_color.h **** #endif
 155:lvgl/src/draw/../misc/lv_color.h **** 
 156:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:lvgl/src/draw/../misc/lv_color.h **** 
 161:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:lvgl/src/draw/../misc/lv_color.h **** 
 166:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:lvgl/src/draw/../misc/lv_color.h **** 
 169:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 170:lvgl/src/draw/../misc/lv_color.h ****  * Macros for the current color depth
 171:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 172:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 173:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:lvgl/src/draw/../misc/lv_color.h **** 
 178:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:lvgl/src/draw/../misc/lv_color.h **** 
 183:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:lvgl/src/draw/../misc/lv_color.h **** 
 186:lvgl/src/draw/../misc/lv_color.h **** /**********************
 187:lvgl/src/draw/../misc/lv_color.h ****  *      TYPEDEFS
 188:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 189:lvgl/src/draw/../misc/lv_color.h **** 
 190:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 191:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:lvgl/src/draw/../misc/lv_color.h ****     union {
 193:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 1;
 194:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 1;
 195:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 1;
 196:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 197:lvgl/src/draw/../misc/lv_color.h **** } lv_color1_t;
 198:lvgl/src/draw/../misc/lv_color.h **** 
 199:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 200:lvgl/src/draw/../misc/lv_color.h ****     struct {
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 5


 201:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 2;
 202:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 3;
 203:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 3;
 204:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 205:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full;
 206:lvgl/src/draw/../misc/lv_color.h **** } lv_color8_t;
 207:lvgl/src/draw/../misc/lv_color.h **** 
 208:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 209:lvgl/src/draw/../misc/lv_color.h ****     struct {
 210:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 212:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green : 6;
 213:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 214:lvgl/src/draw/../misc/lv_color.h **** #else
 215:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_h : 3;
 216:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 217:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 218:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_l : 3;
 219:lvgl/src/draw/../misc/lv_color.h **** #endif
 220:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 221:lvgl/src/draw/../misc/lv_color.h ****     uint16_t full;
 222:lvgl/src/draw/../misc/lv_color.h **** } lv_color16_t;
 223:lvgl/src/draw/../misc/lv_color.h **** 
 224:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 225:lvgl/src/draw/../misc/lv_color.h ****     struct {
 226:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue;
 227:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green;
 228:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red;
 229:lvgl/src/draw/../misc/lv_color.h ****         uint8_t alpha;
 230:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 231:lvgl/src/draw/../misc/lv_color.h ****     uint32_t full;
 232:lvgl/src/draw/../misc/lv_color.h **** } lv_color32_t;
 233:lvgl/src/draw/../misc/lv_color.h **** 
 234:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:lvgl/src/draw/../misc/lv_color.h **** 
 237:lvgl/src/draw/../misc/lv_color.h **** typedef struct {
 238:lvgl/src/draw/../misc/lv_color.h ****     uint16_t h;
 239:lvgl/src/draw/../misc/lv_color.h ****     uint8_t s;
 240:lvgl/src/draw/../misc/lv_color.h ****     uint8_t v;
 241:lvgl/src/draw/../misc/lv_color.h **** } lv_color_hsv_t;
 242:lvgl/src/draw/../misc/lv_color.h **** 
 243:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 244:lvgl/src/draw/../misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:lvgl/src/draw/../misc/lv_color.h **** typedef uint8_t lv_opa_t;
 246:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 247:lvgl/src/draw/../misc/lv_color.h **** 
 248:lvgl/src/draw/../misc/lv_color.h **** struct _lv_color_filter_dsc_t;
 249:lvgl/src/draw/../misc/lv_color.h **** 
 250:lvgl/src/draw/../misc/lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:lvgl/src/draw/../misc/lv_color.h **** 
 252:lvgl/src/draw/../misc/lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:lvgl/src/draw/../misc/lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:lvgl/src/draw/../misc/lv_color.h ****     void * user_data;
 255:lvgl/src/draw/../misc/lv_color.h **** } lv_color_filter_dsc_t;
 256:lvgl/src/draw/../misc/lv_color.h **** 
 257:lvgl/src/draw/../misc/lv_color.h **** typedef enum {
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 6


 258:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_RED,
 259:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PINK,
 260:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PURPLE,
 261:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_INDIGO,
 263:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE,
 264:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_CYAN,
 266:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_TEAL,
 267:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREEN,
 268:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIME,
 270:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_YELLOW,
 271:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_AMBER,
 272:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_ORANGE,
 273:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BROWN,
 275:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREY,
 277:lvgl/src/draw/../misc/lv_color.h ****     _LV_PALETTE_LAST,
 278:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:lvgl/src/draw/../misc/lv_color.h **** } lv_palette_t;
 280:lvgl/src/draw/../misc/lv_color.h **** 
 281:lvgl/src/draw/../misc/lv_color.h **** /**********************
 282:lvgl/src/draw/../misc/lv_color.h ****  * GLOBAL PROTOTYPES
 283:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 284:lvgl/src/draw/../misc/lv_color.h **** 
 285:lvgl/src/draw/../misc/lv_color.h **** /*In color conversations:
 286:lvgl/src/draw/../misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:lvgl/src/draw/../misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:lvgl/src/draw/../misc/lv_color.h ****  *         8 bit Red has 3 bits
 289:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 290:lvgl/src/draw/../misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:lvgl/src/draw/../misc/lv_color.h ****  *
 292:lvgl/src/draw/../misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:lvgl/src/draw/../misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:lvgl/src/draw/../misc/lv_color.h ****  *        16 bit Red has 5 bits
 295:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 296:lvgl/src/draw/../misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:lvgl/src/draw/../misc/lv_color.h ****  */
 298:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:lvgl/src/draw/../misc/lv_color.h **** {
 300:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 302:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 305:lvgl/src/draw/../misc/lv_color.h ****     }
 306:lvgl/src/draw/../misc/lv_color.h ****     else {
 307:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 308:lvgl/src/draw/../misc/lv_color.h ****     }
 309:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 312:lvgl/src/draw/../misc/lv_color.h ****     }
 313:lvgl/src/draw/../misc/lv_color.h ****     else {
 314:lvgl/src/draw/../misc/lv_color.h ****         return 0;
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 7


 315:lvgl/src/draw/../misc/lv_color.h ****     }
 316:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 319:lvgl/src/draw/../misc/lv_color.h ****     }
 320:lvgl/src/draw/../misc/lv_color.h ****     else {
 321:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 322:lvgl/src/draw/../misc/lv_color.h ****     }
 323:lvgl/src/draw/../misc/lv_color.h **** #endif
 324:lvgl/src/draw/../misc/lv_color.h **** }
 325:lvgl/src/draw/../misc/lv_color.h **** 
 326:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:lvgl/src/draw/../misc/lv_color.h **** {
 328:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 330:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 331:lvgl/src/draw/../misc/lv_color.h ****     else
 332:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF;
 333:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 335:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 337:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 341:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 343:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 347:lvgl/src/draw/../misc/lv_color.h **** #endif
 348:lvgl/src/draw/../misc/lv_color.h **** }
 349:lvgl/src/draw/../misc/lv_color.h **** 
 350:lvgl/src/draw/../misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:lvgl/src/draw/../misc/lv_color.h **** {
 352:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 354:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 355:lvgl/src/draw/../misc/lv_color.h ****     else
 356:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFF;
 357:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 359:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 363:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 365:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 367:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 371:lvgl/src/draw/../misc/lv_color.h **** #endif
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 8


 372:lvgl/src/draw/../misc/lv_color.h **** }
 373:lvgl/src/draw/../misc/lv_color.h **** 
 374:lvgl/src/draw/../misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:lvgl/src/draw/../misc/lv_color.h **** {
  30              		.loc 2 375 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 376:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 378:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF000000;
 379:lvgl/src/draw/../misc/lv_color.h ****     else
 380:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFFFFFF;
 381:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
 383:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 388:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:lvgl/src/draw/../misc/lv_color.h ****     /**
 390:lvgl/src/draw/../misc/lv_color.h ****      * The floating point math for conversion is:
 391:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:lvgl/src/draw/../misc/lv_color.h ****      * The faster integer math for conversion is:
 393:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:lvgl/src/draw/../misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:lvgl/src/draw/../misc/lv_color.h ****      *
 396:lvgl/src/draw/../misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:lvgl/src/draw/../misc/lv_color.h ****      *
 398:lvgl/src/draw/../misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:lvgl/src/draw/../misc/lv_color.h ****      *       0           8      7        7       255
 401:lvgl/src/draw/../misc/lv_color.h ****      *       1          16     14        7       255
 402:lvgl/src/draw/../misc/lv_color.h ****      *       2          32     28        7       255
 403:lvgl/src/draw/../misc/lv_color.h ****      *       3          65     25        3       255
 404:lvgl/src/draw/../misc/lv_color.h ****      *       4         131     19        1       255
 405:lvgl/src/draw/../misc/lv_color.h ****      *       5         263      7        0       255
 406:lvgl/src/draw/../misc/lv_color.h ****      *
 407:lvgl/src/draw/../misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:lvgl/src/draw/../misc/lv_color.h ****      *       0           4      3        3       255
 410:lvgl/src/draw/../misc/lv_color.h ****      *       1           8      6        3       255
 411:lvgl/src/draw/../misc/lv_color.h ****      *       2          16     12        3       255
 412:lvgl/src/draw/../misc/lv_color.h ****      *       3          32     24        3       255
 413:lvgl/src/draw/../misc/lv_color.h ****      *       4          64     48        3       255
 414:lvgl/src/draw/../misc/lv_color.h ****      *       5         129     33        1       255
 415:lvgl/src/draw/../misc/lv_color.h ****      *       6         259      3        0       255
 416:lvgl/src/draw/../misc/lv_color.h ****      */
 417:lvgl/src/draw/../misc/lv_color.h **** 
 418:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
  35              		.loc 2 418 5 view .LVU1
 419:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
  36              		.loc 2 419 5 view .LVU2
  37 0000 C0F3C423 		ubfx	r3, r0, #11, #5
  38 0004 03EB4312 		add	r2, r3, r3, lsl #5
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 9


  39 0008 C3EBC203 		rsb	r3, r3, r2, lsl #3
  40 000c 0733     		adds	r3, r3, #7
  41 000e C3F34713 		ubfx	r3, r3, #5, #8
  42 0012 0022     		movs	r2, #0
  43              	.LVL1:
  44              		.loc 2 419 5 is_stmt 0 view .LVU3
  45 0014 63F31742 		bfi	r2, r3, #16, #8
  46              	.LVL2:
 420:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
  47              		.loc 2 420 5 is_stmt 1 view .LVU4
  48 0018 C0F34513 		ubfx	r3, r0, #5, #6
  49 001c 03EBC311 		add	r1, r3, r3, lsl #7
  50 0020 03EB4103 		add	r3, r3, r1, lsl #1
  51 0024 0333     		adds	r3, r3, #3
  52 0026 C3F38713 		ubfx	r3, r3, #6, #8
  53 002a 63F30F22 		bfi	r2, r3, #8, #8
 421:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
  54              		.loc 2 421 5 view .LVU5
  55 002e 00F01F03 		and	r3, r0, #31
  56 0032 03EB4311 		add	r1, r3, r3, lsl #5
  57 0036 C3EBC103 		rsb	r3, r3, r1, lsl #3
  58 003a 0733     		adds	r3, r3, #7
  59 003c C3F34713 		ubfx	r3, r3, #5, #8
  60 0040 63F30702 		bfi	r2, r3, #0, #8
 422:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
  61              		.loc 2 422 5 view .LVU6
 423:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
  62              		.loc 2 423 5 view .LVU7
 424:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 426:lvgl/src/draw/../misc/lv_color.h **** #endif
 427:lvgl/src/draw/../misc/lv_color.h **** }
  63              		.loc 2 427 1 is_stmt 0 view .LVU8
  64 0044 42F07F40 		orr	r0, r2, #-16777216
  65              	.LVL3:
  66              		.loc 2 427 1 view .LVU9
  67 0048 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE5:
  71              		.section	.text.lv_img_buf_get_px_color,"ax",%progbits
  72              		.align	1
  73              		.global	lv_img_buf_get_px_color
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  78              	lv_img_buf_get_px_color:
  79              	.LVL4:
  80              	.LFB54:
   1:lvgl/src/draw/lv_img_buf.c **** /**
   2:lvgl/src/draw/lv_img_buf.c ****  * @file lv_img_buf.c
   3:lvgl/src/draw/lv_img_buf.c ****  *
   4:lvgl/src/draw/lv_img_buf.c ****  */
   5:lvgl/src/draw/lv_img_buf.c **** 
   6:lvgl/src/draw/lv_img_buf.c **** /*********************
   7:lvgl/src/draw/lv_img_buf.c ****  *      INCLUDES
   8:lvgl/src/draw/lv_img_buf.c ****  *********************/
   9:lvgl/src/draw/lv_img_buf.c **** #include <stddef.h>
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 10


  10:lvgl/src/draw/lv_img_buf.c **** #include <string.h>
  11:lvgl/src/draw/lv_img_buf.c **** #include "lv_img_buf.h"
  12:lvgl/src/draw/lv_img_buf.c **** #include "lv_draw_img.h"
  13:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_math.h"
  14:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_log.h"
  15:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_mem.h"
  16:lvgl/src/draw/lv_img_buf.c **** 
  17:lvgl/src/draw/lv_img_buf.c **** /*********************
  18:lvgl/src/draw/lv_img_buf.c ****  *      DEFINES
  19:lvgl/src/draw/lv_img_buf.c ****  *********************/
  20:lvgl/src/draw/lv_img_buf.c **** 
  21:lvgl/src/draw/lv_img_buf.c **** /**********************
  22:lvgl/src/draw/lv_img_buf.c ****  *      TYPEDEFS
  23:lvgl/src/draw/lv_img_buf.c ****  **********************/
  24:lvgl/src/draw/lv_img_buf.c **** 
  25:lvgl/src/draw/lv_img_buf.c **** /**********************
  26:lvgl/src/draw/lv_img_buf.c ****  *  STATIC PROTOTYPES
  27:lvgl/src/draw/lv_img_buf.c ****  **********************/
  28:lvgl/src/draw/lv_img_buf.c **** 
  29:lvgl/src/draw/lv_img_buf.c **** /**********************
  30:lvgl/src/draw/lv_img_buf.c ****  *  STATIC VARIABLES
  31:lvgl/src/draw/lv_img_buf.c ****  **********************/
  32:lvgl/src/draw/lv_img_buf.c **** 
  33:lvgl/src/draw/lv_img_buf.c **** /**********************
  34:lvgl/src/draw/lv_img_buf.c ****  *      MACROS
  35:lvgl/src/draw/lv_img_buf.c ****  **********************/
  36:lvgl/src/draw/lv_img_buf.c **** 
  37:lvgl/src/draw/lv_img_buf.c **** /**********************
  38:lvgl/src/draw/lv_img_buf.c ****  *   GLOBAL FUNCTIONS
  39:lvgl/src/draw/lv_img_buf.c ****  **********************/
  40:lvgl/src/draw/lv_img_buf.c **** 
  41:lvgl/src/draw/lv_img_buf.c **** lv_color_t lv_img_buf_get_px_color(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t
  42:lvgl/src/draw/lv_img_buf.c **** {
  81              		.loc 1 42 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		.loc 1 42 1 is_stmt 0 view .LVU11
  86 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 20
  89              		.cfi_offset 4, -20
  90              		.cfi_offset 5, -16
  91              		.cfi_offset 6, -12
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 83B0     		sub	sp, sp, #12
  95              	.LCFI1:
  96              		.cfi_def_cfa_offset 32
  97 0004 0546     		mov	r5, r0
  98 0006 0C46     		mov	r4, r1
  99 0008 1746     		mov	r7, r2
  43:lvgl/src/draw/lv_img_buf.c ****     lv_color_t p_color = lv_color_black();
 100              		.loc 1 43 5 is_stmt 1 view .LVU12
 101              	.LBB27:
 102              	.LBI27:
 428:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 11


 429:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 430:lvgl/src/draw/../misc/lv_color.h **** 
 431:lvgl/src/draw/../misc/lv_color.h **** /**
 432:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio.
 433:lvgl/src/draw/../misc/lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 436:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 437:lvgl/src/draw/../misc/lv_color.h ****  */
 438:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:lvgl/src/draw/../misc/lv_color.h **** {
 440:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
 441:lvgl/src/draw/../misc/lv_color.h **** 
 442:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:lvgl/src/draw/../misc/lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:lvgl/src/draw/../misc/lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
 446:lvgl/src/draw/../misc/lv_color.h **** #endif
 447:lvgl/src/draw/../misc/lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:lvgl/src/draw/../misc/lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:lvgl/src/draw/../misc/lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:lvgl/src/draw/../misc/lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:lvgl/src/draw/../misc/lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:lvgl/src/draw/../misc/lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:lvgl/src/draw/../misc/lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:lvgl/src/draw/../misc/lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:lvgl/src/draw/../misc/lv_color.h **** #endif
 457:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:lvgl/src/draw/../misc/lv_color.h **** #else
 467:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:lvgl/src/draw/../misc/lv_color.h **** #endif
 470:lvgl/src/draw/../misc/lv_color.h **** 
 471:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 472:lvgl/src/draw/../misc/lv_color.h **** }
 473:lvgl/src/draw/../misc/lv_color.h **** 
 474:lvgl/src/draw/../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:lvgl/src/draw/../misc/lv_color.h **** {
 476:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:lvgl/src/draw/../misc/lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:lvgl/src/draw/../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:lvgl/src/draw/../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 480:lvgl/src/draw/../misc/lv_color.h **** #else
 481:lvgl/src/draw/../misc/lv_color.h ****     (void) mix;
 482:lvgl/src/draw/../misc/lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:lvgl/src/draw/../misc/lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:lvgl/src/draw/../misc/lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 485:lvgl/src/draw/../misc/lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 12


 486:lvgl/src/draw/../misc/lv_color.h **** #endif
 487:lvgl/src/draw/../misc/lv_color.h **** 
 488:lvgl/src/draw/../misc/lv_color.h **** }
 489:lvgl/src/draw/../misc/lv_color.h **** 
 490:lvgl/src/draw/../misc/lv_color.h **** /**
 491:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:lvgl/src/draw/../misc/lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 493:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:lvgl/src/draw/../misc/lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 497:lvgl/src/draw/../misc/lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:lvgl/src/draw/../misc/lv_color.h ****  */
 499:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:lvgl/src/draw/../misc/lv_color.h **** {
 501:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
 502:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 503:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:lvgl/src/draw/../misc/lv_color.h **** #else
 509:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:lvgl/src/draw/../misc/lv_color.h ****     /*Restore color1*/
 511:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t c1;
 512:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:lvgl/src/draw/../misc/lv_color.h **** #endif
 517:lvgl/src/draw/../misc/lv_color.h **** 
 518:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 519:lvgl/src/draw/../misc/lv_color.h **** }
 520:lvgl/src/draw/../misc/lv_color.h **** 
 521:lvgl/src/draw/../misc/lv_color.h **** /**
 522:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_color background color
 524:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_opa alpha of the background color
 525:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_color foreground color
 526:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:lvgl/src/draw/../misc/lv_color.h ****  * @param res_color the result color
 528:lvgl/src/draw/../misc/lv_color.h ****  * @param res_opa the result opacity
 529:lvgl/src/draw/../misc/lv_color.h ****  */
 530:lvgl/src/draw/../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 531:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:lvgl/src/draw/../misc/lv_color.h **** {
 534:lvgl/src/draw/../misc/lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:lvgl/src/draw/../misc/lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = fg_color.full;
 537:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = fg_opa;
 538:lvgl/src/draw/../misc/lv_color.h ****     }
 539:lvgl/src/draw/../misc/lv_color.h ****     /*Transparent foreground: use the Background*/
 540:lvgl/src/draw/../misc/lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = bg_color.full;
 542:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = bg_opa;
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 13


 543:lvgl/src/draw/../misc/lv_color.h ****     }
 544:lvgl/src/draw/../misc/lv_color.h ****     /*Opaque background: use simple mix*/
 545:lvgl/src/draw/../misc/lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:lvgl/src/draw/../misc/lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:lvgl/src/draw/../misc/lv_color.h ****     }
 549:lvgl/src/draw/../misc/lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 550:lvgl/src/draw/../misc/lv_color.h ****     else {
 551:lvgl/src/draw/../misc/lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:lvgl/src/draw/../misc/lv_color.h **** 
 559:lvgl/src/draw/../misc/lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 560:lvgl/src/draw/../misc/lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:lvgl/src/draw/../misc/lv_color.h ****             fg_opa_save        = fg_opa;
 562:lvgl/src/draw/../misc/lv_color.h ****             bg_opa_save        = bg_opa;
 563:lvgl/src/draw/../misc/lv_color.h ****             fg_color_save.full = fg_color.full;
 564:lvgl/src/draw/../misc/lv_color.h ****             bg_color_save.full = bg_color.full;
 565:lvgl/src/draw/../misc/lv_color.h ****             /*Info:
 566:lvgl/src/draw/../misc/lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:lvgl/src/draw/../misc/lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:lvgl/src/draw/../misc/lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:lvgl/src/draw/../misc/lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:lvgl/src/draw/../misc/lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:lvgl/src/draw/../misc/lv_color.h **** 
 572:lvgl/src/draw/../misc/lv_color.h ****         }
 573:lvgl/src/draw/../misc/lv_color.h **** 
 574:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = res_color_saved.full;
 575:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = res_opa_saved;
 576:lvgl/src/draw/../misc/lv_color.h ****     }
 577:lvgl/src/draw/../misc/lv_color.h **** }
 578:lvgl/src/draw/../misc/lv_color.h **** 
 579:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 580:lvgl/src/draw/../misc/lv_color.h **** 
 581:lvgl/src/draw/../misc/lv_color.h **** /**
 582:lvgl/src/draw/../misc/lv_color.h ****  * Get the brightness of a color
 583:lvgl/src/draw/../misc/lv_color.h ****  * @param color a color
 584:lvgl/src/draw/../misc/lv_color.h ****  * @return the brightness [0..255]
 585:lvgl/src/draw/../misc/lv_color.h ****  */
 586:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:lvgl/src/draw/../misc/lv_color.h **** {
 588:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t c32;
 589:lvgl/src/draw/../misc/lv_color.h ****     c32.full        = lv_color_to32(color);
 590:lvgl/src/draw/../misc/lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:lvgl/src/draw/../misc/lv_color.h ****     return (uint8_t)(bright >> 3);
 592:lvgl/src/draw/../misc/lv_color.h **** }
 593:lvgl/src/draw/../misc/lv_color.h **** 
 594:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:lvgl/src/draw/../misc/lv_color.h **** {
 596:lvgl/src/draw/../misc/lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:lvgl/src/draw/../misc/lv_color.h **** }
 598:lvgl/src/draw/../misc/lv_color.h **** 
 599:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 14


 600:lvgl/src/draw/../misc/lv_color.h **** {
 601:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 603:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:lvgl/src/draw/../misc/lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:lvgl/src/draw/../misc/lv_color.h ****         naive way (by calling lv_color_make with components):
 606:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 607:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:lvgl/src/draw/../misc/lv_color.h **** 
 612:lvgl/src/draw/../misc/lv_color.h ****         A bit better:
 613:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = r | g | b
 617:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:lvgl/src/draw/../misc/lv_color.h **** #else
 620:lvgl/src/draw/../misc/lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:lvgl/src/draw/../misc/lv_color.h **** #endif
 623:lvgl/src/draw/../misc/lv_color.h ****     return r;
 624:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 626:lvgl/src/draw/../misc/lv_color.h ****     r.full = c | 0xFF000000;
 627:lvgl/src/draw/../misc/lv_color.h ****     return r;
 628:lvgl/src/draw/../misc/lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 629:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 630:lvgl/src/draw/../misc/lv_color.h **** #endif
 631:lvgl/src/draw/../misc/lv_color.h **** }
 632:lvgl/src/draw/../misc/lv_color.h **** 
 633:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 634:lvgl/src/draw/../misc/lv_color.h **** {
 635:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 636:lvgl/src/draw/../misc/lv_color.h ****                          (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 637:lvgl/src/draw/../misc/lv_color.h **** }
 638:lvgl/src/draw/../misc/lv_color.h **** 
 639:lvgl/src/draw/../misc/lv_color.h **** static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
 640:lvgl/src/draw/../misc/lv_color.h **** {
 641:lvgl/src/draw/../misc/lv_color.h ****     dsc->filter_cb = cb;
 642:lvgl/src/draw/../misc/lv_color.h **** }
 643:lvgl/src/draw/../misc/lv_color.h **** 
 644:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 645:lvgl/src/draw/../misc/lv_color.h **** //!
 646:lvgl/src/draw/../misc/lv_color.h **** void /* LV_ATTRIBUTE_FAST_MEM */ lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
 647:lvgl/src/draw/../misc/lv_color.h **** 
 648:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 649:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl);
 650:lvgl/src/draw/../misc/lv_color.h **** 
 651:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl);
 652:lvgl/src/draw/../misc/lv_color.h **** 
 653:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_change_lightness(lv_color_t c, lv_opa_t lvl);
 654:lvgl/src/draw/../misc/lv_color.h **** 
 655:lvgl/src/draw/../misc/lv_color.h **** /**
 656:lvgl/src/draw/../misc/lv_color.h ****  * Convert a HSV color to RGB
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 15


 657:lvgl/src/draw/../misc/lv_color.h ****  * @param h hue [0..359]
 658:lvgl/src/draw/../misc/lv_color.h ****  * @param s saturation [0..100]
 659:lvgl/src/draw/../misc/lv_color.h ****  * @param v value [0..100]
 660:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 661:lvgl/src/draw/../misc/lv_color.h ****  */
 662:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
 663:lvgl/src/draw/../misc/lv_color.h **** 
 664:lvgl/src/draw/../misc/lv_color.h **** /**
 665:lvgl/src/draw/../misc/lv_color.h ****  * Convert a 32-bit RGB color to HSV
 666:lvgl/src/draw/../misc/lv_color.h ****  * @param r8 8-bit red
 667:lvgl/src/draw/../misc/lv_color.h ****  * @param g8 8-bit green
 668:lvgl/src/draw/../misc/lv_color.h ****  * @param b8 8-bit blue
 669:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in HSV
 670:lvgl/src/draw/../misc/lv_color.h ****  */
 671:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);
 672:lvgl/src/draw/../misc/lv_color.h **** 
 673:lvgl/src/draw/../misc/lv_color.h **** /**
 674:lvgl/src/draw/../misc/lv_color.h ****  * Convert a color to HSV
 675:lvgl/src/draw/../misc/lv_color.h ****  * @param color color
 676:lvgl/src/draw/../misc/lv_color.h ****  * @return the given color in HSV
 677:lvgl/src/draw/../misc/lv_color.h ****  */
 678:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
 679:lvgl/src/draw/../misc/lv_color.h **** 
 680:lvgl/src/draw/../misc/lv_color.h **** /**
 681:lvgl/src/draw/../misc/lv_color.h ****  * Just a wrapper around LV_COLOR_CHROMA_KEY because it might be more convenient to use a function 
 682:lvgl/src/draw/../misc/lv_color.h ****  * @return LV_COLOR_CHROMA_KEY
 683:lvgl/src/draw/../misc/lv_color.h ****  */
 684:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_chroma_key(void)
 685:lvgl/src/draw/../misc/lv_color.h **** {
 686:lvgl/src/draw/../misc/lv_color.h ****     return LV_COLOR_CHROMA_KEY;
 687:lvgl/src/draw/../misc/lv_color.h **** }
 688:lvgl/src/draw/../misc/lv_color.h **** 
 689:lvgl/src/draw/../misc/lv_color.h **** /**********************
 690:lvgl/src/draw/../misc/lv_color.h ****  *  PREDEFINED COLORS
 691:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 692:lvgl/src/draw/../misc/lv_color.h **** /*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/
 693:lvgl/src/draw/../misc/lv_color.h **** 
 694:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_palette_main(lv_palette_t p);
 695:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_white(void)
 696:lvgl/src/draw/../misc/lv_color.h **** {
 697:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0xff, 0xff, 0xff);
 698:lvgl/src/draw/../misc/lv_color.h **** }
 699:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_black(void)
 103              		.loc 2 699 26 view .LVU13
 700:lvgl/src/draw/../misc/lv_color.h **** {
 701:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0x00, 0x0, 0x00);
 104              		.loc 2 701 5 view .LVU14
 105              	.LVL5:
 106              	.LBB28:
 107              	.LBI28:
 594:lvgl/src/draw/../misc/lv_color.h **** {
 108              		.loc 2 594 26 view .LVU15
 109              	.LBB29:
 596:lvgl/src/draw/../misc/lv_color.h **** }
 110              		.loc 2 596 5 view .LVU16
 596:lvgl/src/draw/../misc/lv_color.h **** }
 111              		.loc 2 596 12 is_stmt 0 view .LVU17
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 16


 112 000a 4FF00001 		mov	r1, #0	@ movhi
 113              	.LVL6:
 596:lvgl/src/draw/../misc/lv_color.h **** }
 114              		.loc 2 596 12 view .LVU18
 115 000e 6FF30401 		bfc	r1, #0, #5
 116 0012 6FF34A11 		bfc	r1, #5, #6
 117 0016 6FF3CF21 		bfc	r1, #11, #5
 118              	.LVL7:
 596:lvgl/src/draw/../misc/lv_color.h **** }
 119              		.loc 2 596 12 view .LVU19
 120              	.LBE29:
 121              	.LBE28:
 122              	.LBE27:
 123              		.loc 1 43 26 view .LVU20
 124 001a ADF80410 		strh	r1, [sp, #4]	@ movhi
  44:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 125              		.loc 1 44 5 is_stmt 1 view .LVU21
 126              		.loc 1 44 15 is_stmt 0 view .LVU22
 127 001e 8668     		ldr	r6, [r0, #8]
 128              	.LVL8:
  45:lvgl/src/draw/lv_img_buf.c **** 
  46:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
 129              		.loc 1 46 5 is_stmt 1 view .LVU23
 130              		.loc 1 46 23 is_stmt 0 view .LVU24
 131 0020 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 132 0024 0CF01F0C 		and	ip, ip, #31
 133              		.loc 1 46 7 view .LVU25
 134 0028 BCF1040F 		cmp	ip, #4
 135 002c 0ED0     		beq	.L3
 136 002e ACF1050C 		sub	ip, ip, #5
 137 0032 BCF10F0F 		cmp	ip, #15
 138 0036 24D8     		bhi	.L4
 139 0038 DFE80CF0 		tbb	[pc, ip]
 140              	.LVL9:
 141              	.L5:
 142 003c 08       		.byte	(.L3-.L5)/2
 143 003d 08       		.byte	(.L3-.L5)/2
 144 003e 27       		.byte	(.L10-.L5)/2
 145 003f 3D       		.byte	(.L9-.L5)/2
 146 0040 55       		.byte	(.L8-.L5)/2
 147 0041 6E       		.byte	(.L7-.L5)/2
 148 0042 79       		.byte	(.L6-.L5)/2
 149 0043 79       		.byte	(.L6-.L5)/2
 150 0044 79       		.byte	(.L6-.L5)/2
 151 0045 79       		.byte	(.L6-.L5)/2
 152 0046 23       		.byte	(.L4-.L5)/2
 153 0047 23       		.byte	(.L4-.L5)/2
 154 0048 23       		.byte	(.L4-.L5)/2
 155 0049 23       		.byte	(.L4-.L5)/2
 156 004a 23       		.byte	(.L4-.L5)/2
 157 004b 08       		.byte	(.L3-.L5)/2
 158              		.p2align 1
 159              	.L3:
 160              	.LBB30:
  47:lvgl/src/draw/lv_img_buf.c ****        dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA || dsc->header.cf == LV_IMG_CF_RGB565A8) {
  48:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 161              		.loc 1 48 9 is_stmt 1 view .LVU26
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 17


 162              		.loc 1 48 60 is_stmt 0 view .LVU27
 163 004c 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 164              	.LVL10:
 165              		.loc 1 48 27 view .LVU28
 166 004e 00F01F00 		and	r0, r0, #31
 167 0052 FFF7FEFF 		bl	lv_img_cf_get_px_size
 168              	.LVL11:
 169              		.loc 1 48 17 view .LVU29
 170 0056 C0F3C700 		ubfx	r0, r0, #3, #8
 171              	.LVL12:
  49:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 172              		.loc 1 49 9 is_stmt 1 view .LVU30
 173              		.loc 1 49 38 is_stmt 0 view .LVU31
 174 005a 2B68     		ldr	r3, [r5]
 175 005c C3F38A23 		ubfx	r3, r3, #10, #11
 176              		.loc 1 49 41 view .LVU32
 177 0060 07FB03F3 		mul	r3, r7, r3
 178              		.loc 1 49 59 view .LVU33
 179 0064 00FB04F4 		mul	r4, r0, r4
 180              		.loc 1 49 55 view .LVU34
 181 0068 00FB0342 		mla	r2, r0, r3, r4
 182              	.LVL13:
  50:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 183              		.loc 1 50 9 is_stmt 1 view .LVU35
 184              		.loc 1 50 35 is_stmt 0 view .LVU36
 185 006c 3244     		add	r2, r2, r6
 186              	.LVL14:
 187              	.LBB31:
 188              	.LBI31:
 189              		.file 3 "lvgl/src/draw/../misc/lv_mem.h"
   1:lvgl/src/draw/../misc/lv_mem.h **** /**
   2:lvgl/src/draw/../misc/lv_mem.h ****  * @file lv_mem.h
   3:lvgl/src/draw/../misc/lv_mem.h ****  *
   4:lvgl/src/draw/../misc/lv_mem.h ****  */
   5:lvgl/src/draw/../misc/lv_mem.h **** 
   6:lvgl/src/draw/../misc/lv_mem.h **** #ifndef LV_MEM_H
   7:lvgl/src/draw/../misc/lv_mem.h **** #define LV_MEM_H
   8:lvgl/src/draw/../misc/lv_mem.h **** 
   9:lvgl/src/draw/../misc/lv_mem.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_mem.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_mem.h **** #endif
  12:lvgl/src/draw/../misc/lv_mem.h **** 
  13:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  14:lvgl/src/draw/../misc/lv_mem.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_mem.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_mem.h **** 
  18:lvgl/src/draw/../misc/lv_mem.h **** #include <stdint.h>
  19:lvgl/src/draw/../misc/lv_mem.h **** #include <stddef.h>
  20:lvgl/src/draw/../misc/lv_mem.h **** #include <string.h>
  21:lvgl/src/draw/../misc/lv_mem.h **** 
  22:lvgl/src/draw/../misc/lv_mem.h **** #include "lv_types.h"
  23:lvgl/src/draw/../misc/lv_mem.h **** 
  24:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  25:lvgl/src/draw/../misc/lv_mem.h ****  *      DEFINES
  26:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  27:lvgl/src/draw/../misc/lv_mem.h **** 
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 18


  28:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  29:lvgl/src/draw/../misc/lv_mem.h ****  *      TYPEDEFS
  30:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  31:lvgl/src/draw/../misc/lv_mem.h **** 
  32:lvgl/src/draw/../misc/lv_mem.h **** /**
  33:lvgl/src/draw/../misc/lv_mem.h ****  * Heap information structure.
  34:lvgl/src/draw/../misc/lv_mem.h ****  */
  35:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  36:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t total_size; /**< Total heap size*/
  37:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_cnt;
  38:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_size; /**< Size of available memory*/
  39:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_biggest_size;
  40:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t used_cnt;
  41:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t max_used; /**< Max size of Heap memory used*/
  42:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used_pct; /**< Percentage used*/
  43:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t frag_pct; /**< Amount of fragmentation*/
  44:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_monitor_t;
  45:lvgl/src/draw/../misc/lv_mem.h **** 
  46:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  47:lvgl/src/draw/../misc/lv_mem.h ****     void * p;
  48:lvgl/src/draw/../misc/lv_mem.h ****     uint16_t size;
  49:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used : 1;
  50:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_buf_t;
  51:lvgl/src/draw/../misc/lv_mem.h **** 
  52:lvgl/src/draw/../misc/lv_mem.h **** typedef lv_mem_buf_t lv_mem_buf_arr_t[LV_MEM_BUF_MAX_NUM];
  53:lvgl/src/draw/../misc/lv_mem.h **** 
  54:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  55:lvgl/src/draw/../misc/lv_mem.h ****  * GLOBAL PROTOTYPES
  56:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  57:lvgl/src/draw/../misc/lv_mem.h **** 
  58:lvgl/src/draw/../misc/lv_mem.h **** /**
  59:lvgl/src/draw/../misc/lv_mem.h ****  * Initialize the dyn_mem module (work memory and other variables)
  60:lvgl/src/draw/../misc/lv_mem.h ****  */
  61:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_init(void);
  62:lvgl/src/draw/../misc/lv_mem.h **** 
  63:lvgl/src/draw/../misc/lv_mem.h **** /**
  64:lvgl/src/draw/../misc/lv_mem.h ****  * Clean up the memory buffer which frees all the allocated memories.
  65:lvgl/src/draw/../misc/lv_mem.h ****  * @note It work only if `LV_MEM_CUSTOM == 0`
  66:lvgl/src/draw/../misc/lv_mem.h ****  */
  67:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_deinit(void);
  68:lvgl/src/draw/../misc/lv_mem.h **** 
  69:lvgl/src/draw/../misc/lv_mem.h **** /**
  70:lvgl/src/draw/../misc/lv_mem.h ****  * Allocate a memory dynamically
  71:lvgl/src/draw/../misc/lv_mem.h ****  * @param size size of the memory to allocate in bytes
  72:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the allocated memory
  73:lvgl/src/draw/../misc/lv_mem.h ****  */
  74:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_alloc(size_t size);
  75:lvgl/src/draw/../misc/lv_mem.h **** 
  76:lvgl/src/draw/../misc/lv_mem.h **** /**
  77:lvgl/src/draw/../misc/lv_mem.h ****  * Free an allocated data
  78:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory
  79:lvgl/src/draw/../misc/lv_mem.h ****  */
  80:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_free(void * data);
  81:lvgl/src/draw/../misc/lv_mem.h **** 
  82:lvgl/src/draw/../misc/lv_mem.h **** /**
  83:lvgl/src/draw/../misc/lv_mem.h ****  * Reallocate a memory with a new size. The old content will be kept.
  84:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory.
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 19


  85:lvgl/src/draw/../misc/lv_mem.h ****  * Its content will be copied to the new memory block and freed
  86:lvgl/src/draw/../misc/lv_mem.h ****  * @param new_size the desired new size in byte
  87:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the new memory, NULL on failure
  88:lvgl/src/draw/../misc/lv_mem.h ****  */
  89:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_realloc(void * data_p, size_t new_size);
  90:lvgl/src/draw/../misc/lv_mem.h **** 
  91:lvgl/src/draw/../misc/lv_mem.h **** /**
  92:lvgl/src/draw/../misc/lv_mem.h ****  *
  93:lvgl/src/draw/../misc/lv_mem.h ****  * @return
  94:lvgl/src/draw/../misc/lv_mem.h ****  */
  95:lvgl/src/draw/../misc/lv_mem.h **** lv_res_t lv_mem_test(void);
  96:lvgl/src/draw/../misc/lv_mem.h **** 
  97:lvgl/src/draw/../misc/lv_mem.h **** /**
  98:lvgl/src/draw/../misc/lv_mem.h ****  * Give information about the work memory of dynamic allocation
  99:lvgl/src/draw/../misc/lv_mem.h ****  * @param mon_p pointer to a lv_mem_monitor_t variable,
 100:lvgl/src/draw/../misc/lv_mem.h ****  *              the result of the analysis will be stored here
 101:lvgl/src/draw/../misc/lv_mem.h ****  */
 102:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_monitor(lv_mem_monitor_t * mon_p);
 103:lvgl/src/draw/../misc/lv_mem.h **** 
 104:lvgl/src/draw/../misc/lv_mem.h **** /**
 105:lvgl/src/draw/../misc/lv_mem.h ****  * Get a temporal buffer with the given size.
 106:lvgl/src/draw/../misc/lv_mem.h ****  * @param size the required size
 107:lvgl/src/draw/../misc/lv_mem.h ****  */
 108:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_buf_get(uint32_t size);
 109:lvgl/src/draw/../misc/lv_mem.h **** 
 110:lvgl/src/draw/../misc/lv_mem.h **** /**
 111:lvgl/src/draw/../misc/lv_mem.h ****  * Release a memory buffer
 112:lvgl/src/draw/../misc/lv_mem.h ****  * @param p buffer to release
 113:lvgl/src/draw/../misc/lv_mem.h ****  */
 114:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_release(void * p);
 115:lvgl/src/draw/../misc/lv_mem.h **** 
 116:lvgl/src/draw/../misc/lv_mem.h **** /**
 117:lvgl/src/draw/../misc/lv_mem.h ****  * Free all memory buffers
 118:lvgl/src/draw/../misc/lv_mem.h ****  */
 119:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_free_all(void);
 120:lvgl/src/draw/../misc/lv_mem.h **** 
 121:lvgl/src/draw/../misc/lv_mem.h **** //! @cond Doxygen_Suppress
 122:lvgl/src/draw/../misc/lv_mem.h **** 
 123:lvgl/src/draw/../misc/lv_mem.h **** #if LV_MEMCPY_MEMSET_STD
 124:lvgl/src/draw/../misc/lv_mem.h **** 
 125:lvgl/src/draw/../misc/lv_mem.h **** /**
 126:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 127:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 128:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 129:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 130:lvgl/src/draw/../misc/lv_mem.h ****  */
 131:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy(void * dst, const void * src, size_t len)
 132:lvgl/src/draw/../misc/lv_mem.h **** {
 133:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 134:lvgl/src/draw/../misc/lv_mem.h **** }
 135:lvgl/src/draw/../misc/lv_mem.h **** 
 136:lvgl/src/draw/../misc/lv_mem.h **** /**
 137:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 138:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 139:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 140:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 141:lvgl/src/draw/../misc/lv_mem.h ****  */
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 20


 142:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
 143:lvgl/src/draw/../misc/lv_mem.h **** {
 144:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 145:lvgl/src/draw/../misc/lv_mem.h **** }
 146:lvgl/src/draw/../misc/lv_mem.h **** 
 147:lvgl/src/draw/../misc/lv_mem.h **** /**
 148:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset
 149:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 150:lvgl/src/draw/../misc/lv_mem.h ****  * @param v value to set [0..255]
 151:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 152:lvgl/src/draw/../misc/lv_mem.h ****  */
 153:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset(void * dst, uint8_t v, size_t len)
 154:lvgl/src/draw/../misc/lv_mem.h **** {
 155:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, v, len);
 156:lvgl/src/draw/../misc/lv_mem.h **** }
 157:lvgl/src/draw/../misc/lv_mem.h **** 
 158:lvgl/src/draw/../misc/lv_mem.h **** /**
 159:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0x00 value
 160:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 161:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 162:lvgl/src/draw/../misc/lv_mem.h ****  */
 163:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_00(void * dst, size_t len)
 164:lvgl/src/draw/../misc/lv_mem.h **** {
 165:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0x00, len);
 166:lvgl/src/draw/../misc/lv_mem.h **** }
 167:lvgl/src/draw/../misc/lv_mem.h **** 
 168:lvgl/src/draw/../misc/lv_mem.h **** /**
 169:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0xFF value
 170:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 171:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 172:lvgl/src/draw/../misc/lv_mem.h ****  */
 173:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_ff(void * dst, size_t len)
 174:lvgl/src/draw/../misc/lv_mem.h **** {
 175:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0xFF, len);
 176:lvgl/src/draw/../misc/lv_mem.h **** }
 177:lvgl/src/draw/../misc/lv_mem.h **** 
 178:lvgl/src/draw/../misc/lv_mem.h **** #else
 179:lvgl/src/draw/../misc/lv_mem.h **** /**
 180:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized for 4 byte operation.
 181:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 182:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 183:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 184:lvgl/src/draw/../misc/lv_mem.h ****  */
 185:lvgl/src/draw/../misc/lv_mem.h **** void * /* LV_ATTRIBUTE_FAST_MEM */ lv_memcpy(void * dst, const void * src, size_t len);
 186:lvgl/src/draw/../misc/lv_mem.h **** 
 187:lvgl/src/draw/../misc/lv_mem.h **** /**
 188:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized to copy only a few bytes.
 189:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 190:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 191:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 192:lvgl/src/draw/../misc/lv_mem.h ****  */
 193:lvgl/src/draw/../misc/lv_mem.h **** static inline void * LV_ATTRIBUTE_FAST_MEM lv_memcpy_small(void * dst, const void * src, size_t len
 190              		.loc 3 193 44 is_stmt 1 view .LVU37
 191              	.LBB32:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 195:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t * d8 = (uint8_t *)dst;
 192              		.loc 3 195 5 view .LVU38
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 21


 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 193              		.loc 3 196 5 view .LVU39
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 198:lvgl/src/draw/../misc/lv_mem.h ****     while(len) {
 194              		.loc 3 198 5 view .LVU40
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 195              		.loc 3 195 15 is_stmt 0 view .LVU41
 196 006e 01A9     		add	r1, sp, #4
 197              	.LVL15:
 198              		.loc 3 198 10 view .LVU42
 199 0070 0223     		movs	r3, #2
 200              	.LVL16:
 201              		.loc 3 198 10 view .LVU43
 202 0072 04E0     		b	.L11
 203              	.LVL17:
 204              	.L12:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 205              		.loc 3 199 9 is_stmt 1 view .LVU44
 206              		.loc 3 199 15 is_stmt 0 view .LVU45
 207 0074 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 208              	.LVL18:
 209              		.loc 3 199 13 view .LVU46
 210 0078 01F8010B 		strb	r0, [r1], #1
 211              	.LVL19:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 212              		.loc 3 200 9 is_stmt 1 view .LVU47
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 213              		.loc 3 201 9 view .LVU48
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 214              		.loc 3 202 9 view .LVU49
 215              		.loc 3 202 12 is_stmt 0 view .LVU50
 216 007c 013B     		subs	r3, r3, #1
 217              	.LVL20:
 218              	.L11:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 219              		.loc 3 198 11 is_stmt 1 view .LVU51
 220 007e 002B     		cmp	r3, #0
 221 0080 F8D1     		bne	.L12
 222              	.LVL21:
 223              	.L4:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 224              		.loc 3 198 11 is_stmt 0 view .LVU52
 225              	.LBE32:
 226              	.LBE31:
 227              	.LBE30:
  51:lvgl/src/draw/lv_img_buf.c **** #if LV_COLOR_SIZE == 32
  52:lvgl/src/draw/lv_img_buf.c ****         p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
  53:lvgl/src/draw/lv_img_buf.c **** #endif
  54:lvgl/src/draw/lv_img_buf.c ****     }
  55:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  56:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 2;
  57:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
  58:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
  59:lvgl/src/draw/lv_img_buf.c **** 
  60:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  61:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
  62:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8, 16, 24 ...*/
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 22


  63:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  64:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  65:lvgl/src/draw/lv_img_buf.c ****     }
  66:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  67:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 4;
  68:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
  69:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
  70:lvgl/src/draw/lv_img_buf.c **** 
  71:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  72:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
  73:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8, 12 ...*/
  74:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  75:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  76:lvgl/src/draw/lv_img_buf.c ****     }
  77:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  78:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 16;
  79:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
  80:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
  81:lvgl/src/draw/lv_img_buf.c **** 
  82:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  83:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
  84:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2, 4, 6 ...*/
  85:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  86:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  87:lvgl/src/draw/lv_img_buf.c ****     }
  88:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  89:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 256;
  90:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
  91:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
  92:lvgl/src/draw/lv_img_buf.c ****     }
  93:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  94:lvgl/src/draw/lv_img_buf.c ****             dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  95:lvgl/src/draw/lv_img_buf.c ****         p_color = color;
  96:lvgl/src/draw/lv_img_buf.c ****     }
  97:lvgl/src/draw/lv_img_buf.c ****     return p_color;
 228              		.loc 1 97 5 is_stmt 1 view .LVU53
  98:lvgl/src/draw/lv_img_buf.c **** }
 229              		.loc 1 98 1 is_stmt 0 view .LVU54
 230 0082 BDF80400 		ldrh	r0, [sp, #4]
 231 0086 03B0     		add	sp, sp, #12
 232              	.LCFI2:
 233              		.cfi_remember_state
 234              		.cfi_def_cfa_offset 20
 235              		@ sp needed
 236 0088 F0BD     		pop	{r4, r5, r6, r7, pc}
 237              	.LVL22:
 238              	.L10:
 239              	.LCFI3:
 240              		.cfi_restore_state
 241              	.LBB33:
  56:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 242              		.loc 1 56 9 is_stmt 1 view .LVU55
  57:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 243              		.loc 1 57 9 view .LVU56
  57:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 244              		.loc 1 57 17 is_stmt 0 view .LVU57
 245 008a 04F00702 		and	r2, r4, #7
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 23


 246              	.LVL23:
  58:lvgl/src/draw/lv_img_buf.c **** 
 247              		.loc 1 58 9 is_stmt 1 view .LVU58
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 248              		.loc 1 63 9 view .LVU59
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 249              		.loc 1 63 37 is_stmt 0 view .LVU60
 250 008e 0368     		ldr	r3, [r0]
 251              	.LVL24:
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 252              		.loc 1 63 37 view .LVU61
 253 0090 C3F38A23 		ubfx	r3, r3, #10, #11
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 254              		.loc 1 63 40 view .LVU62
 255 0094 0733     		adds	r3, r3, #7
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 256              		.loc 1 63 45 view .LVU63
 257 0096 DB10     		asrs	r3, r3, #3
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 258              		.loc 1 63 51 view .LVU64
 259 0098 07FB03F3 		mul	r3, r7, r3
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 260              		.loc 1 63 55 view .LVU65
 261 009c 03EBE403 		add	r3, r3, r4, asr #3
 262              	.LVL25:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 263              		.loc 1 64 9 is_stmt 1 view .LVU66
  64:lvgl/src/draw/lv_img_buf.c ****     }
 264              		.loc 1 64 31 is_stmt 0 view .LVU67
 265 00a0 3344     		add	r3, r3, r6
 266              	.LVL26:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 267              		.loc 1 64 31 view .LVU68
 268 00a2 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
  64:lvgl/src/draw/lv_img_buf.c ****     }
 269              		.loc 1 64 47 view .LVU69
 270 00a4 C2F10702 		rsb	r2, r2, #7
 271              	.LVL27:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 272              		.loc 1 64 41 view .LVU70
 273 00a8 0121     		movs	r1, #1
 274 00aa 9140     		lsls	r1, r1, r2
  64:lvgl/src/draw/lv_img_buf.c ****     }
 275              		.loc 1 64 36 view .LVU71
 276 00ac 0B40     		ands	r3, r3, r1
  64:lvgl/src/draw/lv_img_buf.c ****     }
 277              		.loc 1 64 56 view .LVU72
 278 00ae 1341     		asrs	r3, r3, r2
  64:lvgl/src/draw/lv_img_buf.c ****     }
 279              		.loc 1 64 22 view .LVU73
 280 00b0 ADF80430 		strh	r3, [sp, #4]	@ movhi
 281              	.LBE33:
 282 00b4 E5E7     		b	.L4
 283              	.LVL28:
 284              	.L9:
 285              	.LBB34:
  67:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 24


 286              		.loc 1 67 9 is_stmt 1 view .LVU74
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 287              		.loc 1 68 9 view .LVU75
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 288              		.loc 1 68 17 is_stmt 0 view .LVU76
 289 00b6 04F00303 		and	r3, r4, #3
 290              	.LVL29:
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 291              		.loc 1 68 17 view .LVU77
 292 00ba 5A00     		lsls	r2, r3, #1
 293              	.LVL30:
  69:lvgl/src/draw/lv_img_buf.c **** 
 294              		.loc 1 69 9 is_stmt 1 view .LVU78
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 295              		.loc 1 74 9 view .LVU79
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 296              		.loc 1 74 37 is_stmt 0 view .LVU80
 297 00bc 0368     		ldr	r3, [r0]
 298 00be C3F38A23 		ubfx	r3, r3, #10, #11
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 299              		.loc 1 74 40 view .LVU81
 300 00c2 0333     		adds	r3, r3, #3
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 301              		.loc 1 74 45 view .LVU82
 302 00c4 9B10     		asrs	r3, r3, #2
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 303              		.loc 1 74 51 view .LVU83
 304 00c6 07FB03F3 		mul	r3, r7, r3
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 305              		.loc 1 74 55 view .LVU84
 306 00ca 03EBA403 		add	r3, r3, r4, asr #2
 307              	.LVL31:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 308              		.loc 1 75 9 is_stmt 1 view .LVU85
  75:lvgl/src/draw/lv_img_buf.c ****     }
 309              		.loc 1 75 31 is_stmt 0 view .LVU86
 310 00ce 3344     		add	r3, r3, r6
 311              	.LVL32:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 312              		.loc 1 75 31 view .LVU87
 313 00d0 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
  75:lvgl/src/draw/lv_img_buf.c ****     }
 314              		.loc 1 75 47 view .LVU88
 315 00d2 C2F10603 		rsb	r3, r2, #6
  75:lvgl/src/draw/lv_img_buf.c ****     }
 316              		.loc 1 75 41 view .LVU89
 317 00d6 0322     		movs	r2, #3
 318              	.LVL33:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 319              		.loc 1 75 41 view .LVU90
 320 00d8 9A40     		lsls	r2, r2, r3
  75:lvgl/src/draw/lv_img_buf.c ****     }
 321              		.loc 1 75 36 view .LVU91
 322 00da 0A40     		ands	r2, r2, r1
  75:lvgl/src/draw/lv_img_buf.c ****     }
 323              		.loc 1 75 56 view .LVU92
 324 00dc 42FA03F3 		asr	r3, r2, r3
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 25


  75:lvgl/src/draw/lv_img_buf.c ****     }
 325              		.loc 1 75 22 view .LVU93
 326 00e0 ADF80430 		strh	r3, [sp, #4]	@ movhi
 327              	.LBE34:
 328 00e4 CDE7     		b	.L4
 329              	.LVL34:
 330              	.L8:
 331              	.LBB35:
  78:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 332              		.loc 1 78 9 is_stmt 1 view .LVU94
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 333              		.loc 1 79 9 view .LVU95
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 334              		.loc 1 79 17 is_stmt 0 view .LVU96
 335 00e6 04F00103 		and	r3, r4, #1
 336              	.LVL35:
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 337              		.loc 1 79 17 view .LVU97
 338 00ea 9A00     		lsls	r2, r3, #2
 339              	.LVL36:
  80:lvgl/src/draw/lv_img_buf.c **** 
 340              		.loc 1 80 9 is_stmt 1 view .LVU98
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 341              		.loc 1 85 9 view .LVU99
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 342              		.loc 1 85 37 is_stmt 0 view .LVU100
 343 00ec 0368     		ldr	r3, [r0]
 344 00ee C3F38A23 		ubfx	r3, r3, #10, #11
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 345              		.loc 1 85 40 view .LVU101
 346 00f2 0133     		adds	r3, r3, #1
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 347              		.loc 1 85 45 view .LVU102
 348 00f4 5B10     		asrs	r3, r3, #1
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 349              		.loc 1 85 51 view .LVU103
 350 00f6 07FB03F3 		mul	r3, r7, r3
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 351              		.loc 1 85 55 view .LVU104
 352 00fa 03EB6403 		add	r3, r3, r4, asr #1
 353              	.LVL37:
  86:lvgl/src/draw/lv_img_buf.c ****     }
 354              		.loc 1 86 9 is_stmt 1 view .LVU105
  86:lvgl/src/draw/lv_img_buf.c ****     }
 355              		.loc 1 86 31 is_stmt 0 view .LVU106
 356 00fe 3344     		add	r3, r3, r6
 357              	.LVL38:
  86:lvgl/src/draw/lv_img_buf.c ****     }
 358              		.loc 1 86 31 view .LVU107
 359 0100 93F84010 		ldrb	r1, [r3, #64]	@ zero_extendqisi2
  86:lvgl/src/draw/lv_img_buf.c ****     }
 360              		.loc 1 86 49 view .LVU108
 361 0104 C2F10403 		rsb	r3, r2, #4
  86:lvgl/src/draw/lv_img_buf.c ****     }
 362              		.loc 1 86 43 view .LVU109
 363 0108 0F22     		movs	r2, #15
 364              	.LVL39:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 26


  86:lvgl/src/draw/lv_img_buf.c ****     }
 365              		.loc 1 86 43 view .LVU110
 366 010a 9A40     		lsls	r2, r2, r3
  86:lvgl/src/draw/lv_img_buf.c ****     }
 367              		.loc 1 86 36 view .LVU111
 368 010c 0A40     		ands	r2, r2, r1
  86:lvgl/src/draw/lv_img_buf.c ****     }
 369              		.loc 1 86 58 view .LVU112
 370 010e 42FA03F3 		asr	r3, r2, r3
  86:lvgl/src/draw/lv_img_buf.c ****     }
 371              		.loc 1 86 22 view .LVU113
 372 0112 ADF80430 		strh	r3, [sp, #4]	@ movhi
 373              	.LBE35:
 374 0116 B4E7     		b	.L4
 375              	.LVL40:
 376              	.L7:
 377              	.LBB36:
  89:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
 378              		.loc 1 89 9 is_stmt 1 view .LVU114
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 379              		.loc 1 90 9 view .LVU115
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 380              		.loc 1 90 35 is_stmt 0 view .LVU116
 381 0118 0368     		ldr	r3, [r0]
 382              	.LVL41:
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 383              		.loc 1 90 35 view .LVU117
 384 011a C3F38A23 		ubfx	r3, r3, #10, #11
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 385              		.loc 1 90 42 view .LVU118
 386 011e 03FB0744 		mla	r4, r3, r7, r4
 387              	.LVL42:
  91:lvgl/src/draw/lv_img_buf.c ****     }
 388              		.loc 1 91 9 is_stmt 1 view .LVU119
  91:lvgl/src/draw/lv_img_buf.c ****     }
 389              		.loc 1 91 30 is_stmt 0 view .LVU120
 390 0122 2644     		add	r6, r6, r4
 391              	.LVL43:
  91:lvgl/src/draw/lv_img_buf.c ****     }
 392              		.loc 1 91 30 view .LVU121
 393 0124 96F80034 		ldrb	r3, [r6, #1024]	@ zero_extendqisi2
  91:lvgl/src/draw/lv_img_buf.c ****     }
 394              		.loc 1 91 22 view .LVU122
 395 0128 ADF80430 		strh	r3, [sp, #4]	@ movhi
 396              	.LBE36:
 397 012c A9E7     		b	.L4
 398              	.LVL44:
 399              	.L6:
  95:lvgl/src/draw/lv_img_buf.c ****     }
 400              		.loc 1 95 9 is_stmt 1 view .LVU123
  95:lvgl/src/draw/lv_img_buf.c ****     }
 401              		.loc 1 95 17 is_stmt 0 view .LVU124
 402 012e ADF80430 		strh	r3, [sp, #4]	@ movhi
 403 0132 A6E7     		b	.L4
 404              		.cfi_endproc
 405              	.LFE54:
 407              		.section	.text.lv_img_buf_get_px_alpha,"ax",%progbits
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 27


 408              		.align	1
 409              		.global	lv_img_buf_get_px_alpha
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	lv_img_buf_get_px_alpha:
 415              	.LVL45:
 416              	.LFB55:
  99:lvgl/src/draw/lv_img_buf.c **** 
 100:lvgl/src/draw/lv_img_buf.c **** lv_opa_t lv_img_buf_get_px_alpha(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
 101:lvgl/src/draw/lv_img_buf.c **** {
 417              		.loc 1 101 1 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 16
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		.loc 1 101 1 is_stmt 0 view .LVU126
 422 0000 70B5     		push	{r4, r5, r6, lr}
 423              	.LCFI4:
 424              		.cfi_def_cfa_offset 16
 425              		.cfi_offset 4, -16
 426              		.cfi_offset 5, -12
 427              		.cfi_offset 6, -8
 428              		.cfi_offset 14, -4
 429 0002 84B0     		sub	sp, sp, #16
 430              	.LCFI5:
 431              		.cfi_def_cfa_offset 32
 432 0004 8446     		mov	ip, r0
 433 0006 8E46     		mov	lr, r1
 434 0008 1546     		mov	r5, r2
 102:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 435              		.loc 1 102 5 is_stmt 1 view .LVU127
 436              		.loc 1 102 15 is_stmt 0 view .LVU128
 437 000a 8468     		ldr	r4, [r0, #8]
 438              	.LVL46:
 103:lvgl/src/draw/lv_img_buf.c **** 
 104:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 439              		.loc 1 104 5 is_stmt 1 view .LVU129
 440              		.loc 1 104 23 is_stmt 0 view .LVU130
 441 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 442 000e 03F01F03 		and	r3, r3, #31
 443              		.loc 1 104 7 view .LVU131
 444 0012 052B     		cmp	r3, #5
 445 0014 06D0     		beq	.L28
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 106:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 107:lvgl/src/draw/lv_img_buf.c ****     }
 108:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 446              		.loc 1 108 10 is_stmt 1 view .LVU132
 447 0016 0B3B     		subs	r3, r3, #11
 448 0018 032B     		cmp	r3, #3
 449 001a 67D8     		bhi	.L25
 450 001c DFE803F0 		tbb	[pc, r3]
 451              	.LVL47:
 452              	.L20:
 453 0020 0D       		.byte	(.L23-.L20)/2
 454 0021 26       		.byte	(.L22-.L20)/2
 455 0022 41       		.byte	(.L21-.L20)/2
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 28


 456 0023 5F       		.byte	(.L19-.L20)/2
 457              		.p2align 1
 458              	.L28:
 459              	.LBB37:
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 460              		.loc 1 105 9 view .LVU133
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 461              		.loc 1 105 34 is_stmt 0 view .LVU134
 462 0024 0368     		ldr	r3, [r0]
 463 0026 C3F38A23 		ubfx	r3, r3, #10, #11
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 464              		.loc 1 105 69 view .LVU135
 465 002a 03FB0212 		mla	r2, r3, r2, r1
 466              	.LVL48:
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 467              		.loc 1 105 69 view .LVU136
 468 002e 02EB4202 		add	r2, r2, r2, lsl #1
 469              	.LVL49:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 470              		.loc 1 106 9 is_stmt 1 view .LVU137
 106:lvgl/src/draw/lv_img_buf.c ****     }
 471              		.loc 1 106 22 is_stmt 0 view .LVU138
 472 0032 2244     		add	r2, r2, r4
 473              	.LVL50:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 474              		.loc 1 106 22 view .LVU139
 475 0034 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 476              	.LVL51:
 477              	.L18:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 478              		.loc 1 106 22 view .LVU140
 479              	.LBE37:
 109:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 110:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 111:lvgl/src/draw/lv_img_buf.c **** 
 112:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 113:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 114:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 115:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 116:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 117:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 118:lvgl/src/draw/lv_img_buf.c ****     }
 119:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 120:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 121:lvgl/src/draw/lv_img_buf.c **** 
 122:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 123:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 124:lvgl/src/draw/lv_img_buf.c **** 
 125:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 126:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 127:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 128:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 129:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 130:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 131:lvgl/src/draw/lv_img_buf.c ****     }
 132:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 133:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 29


 134:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 135:lvgl/src/draw/lv_img_buf.c ****                                       };
 136:lvgl/src/draw/lv_img_buf.c **** 
 137:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 138:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 139:lvgl/src/draw/lv_img_buf.c **** 
 140:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 141:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 142:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 143:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 144:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 145:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 146:lvgl/src/draw/lv_img_buf.c ****     }
 147:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 148:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 149:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 150:lvgl/src/draw/lv_img_buf.c ****     }
 151:lvgl/src/draw/lv_img_buf.c **** 
 152:lvgl/src/draw/lv_img_buf.c ****     return LV_OPA_COVER;
 153:lvgl/src/draw/lv_img_buf.c **** }
 480              		.loc 1 153 1 discriminator 1 view .LVU141
 481 0036 04B0     		add	sp, sp, #16
 482              	.LCFI6:
 483              		.cfi_remember_state
 484              		.cfi_def_cfa_offset 16
 485              		@ sp needed
 486 0038 70BD     		pop	{r4, r5, r6, pc}
 487              	.LVL52:
 488              	.L23:
 489              	.LCFI7:
 490              		.cfi_restore_state
 491              	.LBB38:
 109:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 492              		.loc 1 109 9 is_stmt 1 view .LVU142
 109:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 493              		.loc 1 109 17 is_stmt 0 view .LVU143
 494 003a 01F00702 		and	r2, r1, #7
 495              	.LVL53:
 110:lvgl/src/draw/lv_img_buf.c **** 
 496              		.loc 1 110 9 is_stmt 1 view .LVU144
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 497              		.loc 1 115 9 view .LVU145
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 498              		.loc 1 115 39 is_stmt 0 view .LVU146
 499 003e 0368     		ldr	r3, [r0]
 500 0040 C3F38A23 		ubfx	r3, r3, #10, #11
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 501              		.loc 1 115 42 view .LVU147
 502 0044 0733     		adds	r3, r3, #7
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 503              		.loc 1 115 47 view .LVU148
 504 0046 DB10     		asrs	r3, r3, #3
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 505              		.loc 1 115 53 view .LVU149
 506 0048 05FB03F3 		mul	r3, r5, r3
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 507              		.loc 1 115 57 view .LVU150
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 30


 508 004c 03EBE103 		add	r3, r3, r1, asr #3
 509              	.LVL54:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 510              		.loc 1 116 9 is_stmt 1 view .LVU151
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 511              		.loc 1 116 33 is_stmt 0 view .LVU152
 512 0050 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 513              	.LVL55:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 514              		.loc 1 116 49 view .LVU153
 515 0052 C2F10702 		rsb	r2, r2, #7
 516              	.LVL56:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 517              		.loc 1 116 43 view .LVU154
 518 0056 0121     		movs	r1, #1
 519              	.LVL57:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 520              		.loc 1 116 43 view .LVU155
 521 0058 9140     		lsls	r1, r1, r2
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 522              		.loc 1 116 38 view .LVU156
 523 005a 0B40     		ands	r3, r3, r1
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 524              		.loc 1 116 58 view .LVU157
 525 005c 1341     		asrs	r3, r3, r2
 526              	.LVL58:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 527              		.loc 1 117 9 is_stmt 1 view .LVU158
 117:lvgl/src/draw/lv_img_buf.c ****     }
 528              		.loc 1 117 39 is_stmt 0 view .LVU159
 529 005e 13F0FF0F 		tst	r3, #255
 530 0062 01D0     		beq	.L26
 531 0064 0020     		movs	r0, #0
 532              	.LVL59:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 533              		.loc 1 117 39 view .LVU160
 534 0066 E6E7     		b	.L18
 535              	.LVL60:
 536              	.L26:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 537              		.loc 1 117 39 view .LVU161
 538 0068 FF20     		movs	r0, #255
 539              	.LVL61:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 540              		.loc 1 117 39 view .LVU162
 541 006a E4E7     		b	.L18
 542              	.LVL62:
 543              	.L22:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 544              		.loc 1 117 39 view .LVU163
 545              	.LBE38:
 546              	.LBB39:
 120:lvgl/src/draw/lv_img_buf.c **** 
 547              		.loc 1 120 9 is_stmt 1 view .LVU164
 120:lvgl/src/draw/lv_img_buf.c **** 
 548              		.loc 1 120 23 is_stmt 0 view .LVU165
 549 006c 204B     		ldr	r3, .L29
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 31


 550 006e 0093     		str	r3, [sp]
 122:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 551              		.loc 1 122 9 is_stmt 1 view .LVU166
 122:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 552              		.loc 1 122 17 is_stmt 0 view .LVU167
 553 0070 01F00302 		and	r2, r1, #3
 554 0074 5200     		lsls	r2, r2, #1
 555              	.LVL63:
 123:lvgl/src/draw/lv_img_buf.c **** 
 556              		.loc 1 123 9 is_stmt 1 view .LVU168
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 557              		.loc 1 128 9 view .LVU169
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 558              		.loc 1 128 39 is_stmt 0 view .LVU170
 559 0076 0368     		ldr	r3, [r0]
 560 0078 C3F38A23 		ubfx	r3, r3, #10, #11
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 561              		.loc 1 128 42 view .LVU171
 562 007c 0333     		adds	r3, r3, #3
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 563              		.loc 1 128 47 view .LVU172
 564 007e 9B10     		asrs	r3, r3, #2
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 565              		.loc 1 128 53 view .LVU173
 566 0080 05FB03F3 		mul	r3, r5, r3
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 567              		.loc 1 128 57 view .LVU174
 568 0084 03EBA103 		add	r3, r3, r1, asr #2
 569              	.LVL64:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 570              		.loc 1 129 9 is_stmt 1 view .LVU175
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 571              		.loc 1 129 33 is_stmt 0 view .LVU176
 572 0088 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 573              	.LVL65:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 574              		.loc 1 129 49 view .LVU177
 575 008a C2F10602 		rsb	r2, r2, #6
 576              	.LVL66:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 577              		.loc 1 129 43 view .LVU178
 578 008e 0321     		movs	r1, #3
 579              	.LVL67:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 580              		.loc 1 129 43 view .LVU179
 581 0090 9140     		lsls	r1, r1, r2
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 582              		.loc 1 129 38 view .LVU180
 583 0092 0B40     		ands	r3, r3, r1
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 584              		.loc 1 129 58 view .LVU181
 585 0094 1341     		asrs	r3, r3, r2
 586              	.LVL68:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 587              		.loc 1 130 9 is_stmt 1 view .LVU182
 130:lvgl/src/draw/lv_img_buf.c ****     }
 588              		.loc 1 130 25 is_stmt 0 view .LVU183
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 32


 589 0096 04AA     		add	r2, sp, #16
 590 0098 52FA83F3 		uxtab	r3, r2, r3
 591              	.LVL69:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 592              		.loc 1 130 25 view .LVU184
 593 009c 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 594              	.LVL70:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 595              		.loc 1 130 25 view .LVU185
 596 00a0 C9E7     		b	.L18
 597              	.LVL71:
 598              	.L21:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 599              		.loc 1 130 25 view .LVU186
 600              	.LBE39:
 601              	.LBB40:
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 602              		.loc 1 133 9 is_stmt 1 view .LVU187
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 603              		.loc 1 133 23 is_stmt 0 view .LVU188
 604 00a2 144B     		ldr	r3, .L29+4
 605 00a4 0FCB     		ldm	r3, {r0, r1, r2, r3}
 606              	.LVL72:
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 607              		.loc 1 133 23 view .LVU189
 608 00a6 04AE     		add	r6, sp, #16
 609 00a8 06E90F00 		stmdb	r6, {r0, r1, r2, r3}
 137:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 610              		.loc 1 137 9 is_stmt 1 view .LVU190
 137:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 611              		.loc 1 137 17 is_stmt 0 view .LVU191
 612 00ac 0EF00102 		and	r2, lr, #1
 613 00b0 9200     		lsls	r2, r2, #2
 614              	.LVL73:
 138:lvgl/src/draw/lv_img_buf.c **** 
 615              		.loc 1 138 9 is_stmt 1 view .LVU192
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 616              		.loc 1 143 9 view .LVU193
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 617              		.loc 1 143 39 is_stmt 0 view .LVU194
 618 00b2 DCF80030 		ldr	r3, [ip]
 619 00b6 C3F38A23 		ubfx	r3, r3, #10, #11
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 620              		.loc 1 143 42 view .LVU195
 621 00ba 0133     		adds	r3, r3, #1
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 622              		.loc 1 143 47 view .LVU196
 623 00bc 5B10     		asrs	r3, r3, #1
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 624              		.loc 1 143 53 view .LVU197
 625 00be 05FB03F3 		mul	r3, r5, r3
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 626              		.loc 1 143 57 view .LVU198
 627 00c2 03EB6E03 		add	r3, r3, lr, asr #1
 628              	.LVL74:
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 629              		.loc 1 144 9 is_stmt 1 view .LVU199
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 33


 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 630              		.loc 1 144 33 is_stmt 0 view .LVU200
 631 00c6 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 632              	.LVL75:
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 633              		.loc 1 144 51 view .LVU201
 634 00c8 C2F10402 		rsb	r2, r2, #4
 635              	.LVL76:
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 636              		.loc 1 144 45 view .LVU202
 637 00cc 0F21     		movs	r1, #15
 638 00ce 9140     		lsls	r1, r1, r2
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 639              		.loc 1 144 38 view .LVU203
 640 00d0 0B40     		ands	r3, r3, r1
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 641              		.loc 1 144 60 view .LVU204
 642 00d2 1341     		asrs	r3, r3, r2
 643              	.LVL77:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 644              		.loc 1 145 9 is_stmt 1 view .LVU205
 145:lvgl/src/draw/lv_img_buf.c ****     }
 645              		.loc 1 145 25 is_stmt 0 view .LVU206
 646 00d4 56FA83F3 		uxtab	r3, r6, r3
 647              	.LVL78:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 648              		.loc 1 145 25 view .LVU207
 649 00d8 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 650 00dc ABE7     		b	.L18
 651              	.LVL79:
 652              	.L19:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 653              		.loc 1 145 25 view .LVU208
 654              	.LBE40:
 655              	.LBB41:
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 656              		.loc 1 148 9 is_stmt 1 view .LVU209
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 657              		.loc 1 148 34 is_stmt 0 view .LVU210
 658 00de 0368     		ldr	r3, [r0]
 659 00e0 C3F38A23 		ubfx	r3, r3, #10, #11
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 660              		.loc 1 148 41 view .LVU211
 661 00e4 03FB0512 		mla	r2, r3, r5, r1
 662              	.LVL80:
 149:lvgl/src/draw/lv_img_buf.c ****     }
 663              		.loc 1 149 9 is_stmt 1 view .LVU212
 149:lvgl/src/draw/lv_img_buf.c ****     }
 664              		.loc 1 149 22 is_stmt 0 view .LVU213
 665 00e8 A05C     		ldrb	r0, [r4, r2]	@ zero_extendqisi2
 666              	.LVL81:
 149:lvgl/src/draw/lv_img_buf.c ****     }
 667              		.loc 1 149 22 view .LVU214
 668 00ea A4E7     		b	.L18
 669              	.LVL82:
 670              	.L25:
 149:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 34


 671              		.loc 1 149 22 view .LVU215
 672              	.LBE41:
 104:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 673              		.loc 1 104 7 view .LVU216
 674 00ec FF20     		movs	r0, #255
 675              	.LVL83:
 104:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 676              		.loc 1 104 7 view .LVU217
 677 00ee A2E7     		b	.L18
 678              	.L30:
 679              		.align	2
 680              	.L29:
 681 00f0 0055AAFF 		.word	-5614336
 682 00f4 00000000 		.word	.LANCHOR0
 683              		.cfi_endproc
 684              	.LFE55:
 686              		.section	.text.lv_img_buf_set_px_alpha,"ax",%progbits
 687              		.align	1
 688              		.global	lv_img_buf_set_px_alpha
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 693              	lv_img_buf_set_px_alpha:
 694              	.LVL84:
 695              	.LFB56:
 154:lvgl/src/draw/lv_img_buf.c **** 
 155:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_alpha(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa)
 156:lvgl/src/draw/lv_img_buf.c **** {
 696              		.loc 1 156 1 is_stmt 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		.loc 1 156 1 is_stmt 0 view .LVU219
 701 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 702              	.LCFI8:
 703              		.cfi_def_cfa_offset 24
 704              		.cfi_offset 4, -24
 705              		.cfi_offset 5, -20
 706              		.cfi_offset 6, -16
 707              		.cfi_offset 7, -12
 708              		.cfi_offset 8, -8
 709              		.cfi_offset 14, -4
 710 0004 0446     		mov	r4, r0
 711 0006 0E46     		mov	r6, r1
 712 0008 1746     		mov	r7, r2
 713 000a 1D46     		mov	r5, r3
 157:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 714              		.loc 1 157 5 is_stmt 1 view .LVU220
 715              		.loc 1 157 15 is_stmt 0 view .LVU221
 716 000c D0F80880 		ldr	r8, [r0, #8]
 717              	.LVL85:
 158:lvgl/src/draw/lv_img_buf.c **** 
 159:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 718              		.loc 1 159 5 is_stmt 1 view .LVU222
 719              		.loc 1 159 23 is_stmt 0 view .LVU223
 720 0010 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 721 0014 0CF01F0C 		and	ip, ip, #31
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 35


 722              		.loc 1 159 7 view .LVU224
 723 0018 BCF1050F 		cmp	ip, #5
 724 001c 08D0     		beq	.L41
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 161:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 162:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 163:lvgl/src/draw/lv_img_buf.c ****     }
 164:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 725              		.loc 1 164 10 is_stmt 1 view .LVU225
 726 001e ACF10B0C 		sub	ip, ip, #11
 727 0022 BCF1030F 		cmp	ip, #3
 728 0026 15D8     		bhi	.L31
 729 0028 DFE80CF0 		tbb	[pc, ip]
 730              	.LVL86:
 731              	.L35:
 732 002c 16       		.byte	(.L38-.L35)/2
 733 002d 32       		.byte	(.L37-.L35)/2
 734 002e 4F       		.byte	(.L36-.L35)/2
 735 002f 6C       		.byte	(.L34-.L35)/2
 736              		.p2align 1
 737              	.L41:
 738              	.LBB42:
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 739              		.loc 1 160 9 view .LVU226
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 740              		.loc 1 160 36 is_stmt 0 view .LVU227
 741 0030 6046     		mov	r0, ip
 742              	.LVL87:
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 743              		.loc 1 160 36 view .LVU228
 744 0032 FFF7FEFF 		bl	lv_img_cf_get_px_size
 745              	.LVL88:
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 746              		.loc 1 160 17 view .LVU229
 747 0036 C0F3C700 		ubfx	r0, r0, #3, #8
 748              	.LVL89:
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 749              		.loc 1 161 9 is_stmt 1 view .LVU230
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 750              		.loc 1 161 47 is_stmt 0 view .LVU231
 751 003a 2368     		ldr	r3, [r4]
 752 003c C3F38A23 		ubfx	r3, r3, #10, #11
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 753              		.loc 1 161 50 view .LVU232
 754 0040 07FB03F3 		mul	r3, r7, r3
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 755              		.loc 1 161 68 view .LVU233
 756 0044 00FB06F6 		mul	r6, r0, r6
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 757              		.loc 1 161 64 view .LVU234
 758 0048 00FB0366 		mla	r6, r0, r3, r6
 759              	.LVL90:
 162:lvgl/src/draw/lv_img_buf.c ****     }
 760              		.loc 1 162 9 is_stmt 1 view .LVU235
 162:lvgl/src/draw/lv_img_buf.c ****     }
 761              		.loc 1 162 19 is_stmt 0 view .LVU236
 762 004c 3044     		add	r0, r0, r6
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 36


 763              	.LVL91:
 162:lvgl/src/draw/lv_img_buf.c ****     }
 764              		.loc 1 162 15 view .LVU237
 765 004e 0138     		subs	r0, r0, #1
 162:lvgl/src/draw/lv_img_buf.c ****     }
 766              		.loc 1 162 34 view .LVU238
 767 0050 08F80050 		strb	r5, [r8, r0]
 768              	.LVL92:
 769              	.L31:
 162:lvgl/src/draw/lv_img_buf.c ****     }
 770              		.loc 1 162 34 view .LVU239
 771              	.LBE42:
 165:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 7; /*opa -> [0,1]*/
 166:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 167:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 168:lvgl/src/draw/lv_img_buf.c **** 
 169:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 170:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 171:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 172:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 174:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 175:lvgl/src/draw/lv_img_buf.c ****     }
 176:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 177:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 6; /*opa -> [0,3]*/
 178:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 179:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 180:lvgl/src/draw/lv_img_buf.c **** 
 181:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 182:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 183:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 184:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 186:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 187:lvgl/src/draw/lv_img_buf.c ****     }
 188:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 189:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 4; /*opa -> [0,15]*/
 190:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 191:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 192:lvgl/src/draw/lv_img_buf.c **** 
 193:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 194:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 195:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 196:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 199:lvgl/src/draw/lv_img_buf.c ****     }
 200:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 201:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 202:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 203:lvgl/src/draw/lv_img_buf.c ****     }
 204:lvgl/src/draw/lv_img_buf.c **** }
 772              		.loc 1 204 1 view .LVU240
 773 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 774              	.LVL93:
 775              	.L38:
 776              	.LBB43:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 37


 165:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 7; /*opa -> [0,1]*/
 777              		.loc 1 165 9 is_stmt 1 view .LVU241
 165:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 7; /*opa -> [0,1]*/
 778              		.loc 1 165 21 is_stmt 0 view .LVU242
 779 0058 ED09     		lsrs	r5, r5, #7
 780              	.LVL94:
 166:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 781              		.loc 1 166 9 is_stmt 1 view .LVU243
 166:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 782              		.loc 1 166 17 is_stmt 0 view .LVU244
 783 005a 01F00700 		and	r0, r1, #7
 784              	.LVL95:
 167:lvgl/src/draw/lv_img_buf.c **** 
 785              		.loc 1 167 9 is_stmt 1 view .LVU245
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 786              		.loc 1 172 9 view .LVU246
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 787              		.loc 1 172 36 is_stmt 0 view .LVU247
 788 005e 2368     		ldr	r3, [r4]
 789 0060 C3F38A23 		ubfx	r3, r3, #10, #11
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 790              		.loc 1 172 39 view .LVU248
 791 0064 0733     		adds	r3, r3, #7
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 792              		.loc 1 172 44 view .LVU249
 793 0066 DB10     		asrs	r3, r3, #3
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 794              		.loc 1 172 50 view .LVU250
 795 0068 02FB03F3 		mul	r3, r2, r3
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 796              		.loc 1 172 54 view .LVU251
 797 006c 03EBE103 		add	r3, r3, r1, asr #3
 798              	.LVL96:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 799              		.loc 1 173 9 is_stmt 1 view .LVU252
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 800              		.loc 1 173 29 is_stmt 0 view .LVU253
 801 0070 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 802              	.LVL97:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 803              		.loc 1 173 46 view .LVU254
 804 0074 C0F10700 		rsb	r0, r0, #7
 805              	.LVL98:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 806              		.loc 1 173 40 view .LVU255
 807 0078 0122     		movs	r2, #1
 808              	.LVL99:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 809              		.loc 1 173 40 view .LVU256
 810 007a 8240     		lsls	r2, r2, r0
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 811              		.loc 1 173 34 view .LVU257
 812 007c D243     		mvns	r2, r2
 813 007e 52B2     		sxtb	r2, r2
 814 0080 0A40     		ands	r2, r2, r1
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 815              		.loc 1 173 21 view .LVU258
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 38


 816 0082 08F80320 		strb	r2, [r8, r3]
 174:lvgl/src/draw/lv_img_buf.c ****     }
 817              		.loc 1 174 9 is_stmt 1 view .LVU259
 174:lvgl/src/draw/lv_img_buf.c ****     }
 818              		.loc 1 174 49 is_stmt 0 view .LVU260
 819 0086 8540     		lsls	r5, r5, r0
 820              	.LVL100:
 174:lvgl/src/draw/lv_img_buf.c ****     }
 821              		.loc 1 174 34 view .LVU261
 822 0088 2A43     		orrs	r2, r2, r5
 174:lvgl/src/draw/lv_img_buf.c ****     }
 823              		.loc 1 174 21 view .LVU262
 824 008a 08F80320 		strb	r2, [r8, r3]
 825              	.LBE43:
 826 008e E1E7     		b	.L31
 827              	.LVL101:
 828              	.L37:
 829              	.LBB44:
 177:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 830              		.loc 1 177 9 is_stmt 1 view .LVU263
 177:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 831              		.loc 1 177 21 is_stmt 0 view .LVU264
 832 0090 AD09     		lsrs	r5, r5, #6
 833              	.LVL102:
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 834              		.loc 1 178 9 is_stmt 1 view .LVU265
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 835              		.loc 1 178 17 is_stmt 0 view .LVU266
 836 0092 01F00300 		and	r0, r1, #3
 837              	.LVL103:
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 838              		.loc 1 178 17 view .LVU267
 839 0096 4000     		lsls	r0, r0, #1
 840              	.LVL104:
 179:lvgl/src/draw/lv_img_buf.c **** 
 841              		.loc 1 179 9 is_stmt 1 view .LVU268
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 842              		.loc 1 184 9 view .LVU269
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 843              		.loc 1 184 36 is_stmt 0 view .LVU270
 844 0098 2368     		ldr	r3, [r4]
 845 009a C3F38A23 		ubfx	r3, r3, #10, #11
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 846              		.loc 1 184 39 view .LVU271
 847 009e 0333     		adds	r3, r3, #3
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 848              		.loc 1 184 44 view .LVU272
 849 00a0 9B10     		asrs	r3, r3, #2
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 850              		.loc 1 184 50 view .LVU273
 851 00a2 02FB03F3 		mul	r3, r2, r3
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 852              		.loc 1 184 54 view .LVU274
 853 00a6 03EBA103 		add	r3, r3, r1, asr #2
 854              	.LVL105:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 855              		.loc 1 185 9 is_stmt 1 view .LVU275
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 39


 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 856              		.loc 1 185 29 is_stmt 0 view .LVU276
 857 00aa 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 858              	.LVL106:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 859              		.loc 1 185 46 view .LVU277
 860 00ae C0F10600 		rsb	r0, r0, #6
 861              	.LVL107:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 862              		.loc 1 185 40 view .LVU278
 863 00b2 0322     		movs	r2, #3
 864              	.LVL108:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 865              		.loc 1 185 40 view .LVU279
 866 00b4 8240     		lsls	r2, r2, r0
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 867              		.loc 1 185 34 view .LVU280
 868 00b6 D243     		mvns	r2, r2
 869 00b8 52B2     		sxtb	r2, r2
 870 00ba 0A40     		ands	r2, r2, r1
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 871              		.loc 1 185 21 view .LVU281
 872 00bc 08F80320 		strb	r2, [r8, r3]
 186:lvgl/src/draw/lv_img_buf.c ****     }
 873              		.loc 1 186 9 is_stmt 1 view .LVU282
 186:lvgl/src/draw/lv_img_buf.c ****     }
 874              		.loc 1 186 49 is_stmt 0 view .LVU283
 875 00c0 8540     		lsls	r5, r5, r0
 876              	.LVL109:
 186:lvgl/src/draw/lv_img_buf.c ****     }
 877              		.loc 1 186 34 view .LVU284
 878 00c2 2A43     		orrs	r2, r2, r5
 186:lvgl/src/draw/lv_img_buf.c ****     }
 879              		.loc 1 186 21 view .LVU285
 880 00c4 08F80320 		strb	r2, [r8, r3]
 881              	.LBE44:
 882 00c8 C4E7     		b	.L31
 883              	.LVL110:
 884              	.L36:
 885              	.LBB45:
 189:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 886              		.loc 1 189 9 is_stmt 1 view .LVU286
 189:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 887              		.loc 1 189 21 is_stmt 0 view .LVU287
 888 00ca 2D09     		lsrs	r5, r5, #4
 889              	.LVL111:
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 890              		.loc 1 190 9 is_stmt 1 view .LVU288
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 891              		.loc 1 190 17 is_stmt 0 view .LVU289
 892 00cc 01F00100 		and	r0, r1, #1
 893              	.LVL112:
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 894              		.loc 1 190 17 view .LVU290
 895 00d0 8000     		lsls	r0, r0, #2
 896              	.LVL113:
 191:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 40


 897              		.loc 1 191 9 is_stmt 1 view .LVU291
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 898              		.loc 1 196 9 view .LVU292
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 899              		.loc 1 196 36 is_stmt 0 view .LVU293
 900 00d2 2368     		ldr	r3, [r4]
 901 00d4 C3F38A23 		ubfx	r3, r3, #10, #11
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 902              		.loc 1 196 39 view .LVU294
 903 00d8 0133     		adds	r3, r3, #1
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 904              		.loc 1 196 44 view .LVU295
 905 00da 5B10     		asrs	r3, r3, #1
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 906              		.loc 1 196 50 view .LVU296
 907 00dc 02FB03F3 		mul	r3, r2, r3
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 908              		.loc 1 196 54 view .LVU297
 909 00e0 03EB6103 		add	r3, r3, r1, asr #1
 910              	.LVL114:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 911              		.loc 1 197 9 is_stmt 1 view .LVU298
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 912              		.loc 1 197 29 is_stmt 0 view .LVU299
 913 00e4 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 914              	.LVL115:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 915              		.loc 1 197 48 view .LVU300
 916 00e8 C0F10400 		rsb	r0, r0, #4
 917              	.LVL116:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 918              		.loc 1 197 42 view .LVU301
 919 00ec 0F22     		movs	r2, #15
 920              	.LVL117:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 921              		.loc 1 197 42 view .LVU302
 922 00ee 8240     		lsls	r2, r2, r0
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 923              		.loc 1 197 34 view .LVU303
 924 00f0 D243     		mvns	r2, r2
 925 00f2 52B2     		sxtb	r2, r2
 926 00f4 0A40     		ands	r2, r2, r1
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 927              		.loc 1 197 21 view .LVU304
 928 00f6 08F80320 		strb	r2, [r8, r3]
 198:lvgl/src/draw/lv_img_buf.c ****     }
 929              		.loc 1 198 9 is_stmt 1 view .LVU305
 198:lvgl/src/draw/lv_img_buf.c ****     }
 930              		.loc 1 198 49 is_stmt 0 view .LVU306
 931 00fa 8540     		lsls	r5, r5, r0
 932              	.LVL118:
 198:lvgl/src/draw/lv_img_buf.c ****     }
 933              		.loc 1 198 34 view .LVU307
 934 00fc 2A43     		orrs	r2, r2, r5
 198:lvgl/src/draw/lv_img_buf.c ****     }
 935              		.loc 1 198 21 view .LVU308
 936 00fe 08F80320 		strb	r2, [r8, r3]
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 41


 937              	.LBE45:
 938 0102 A7E7     		b	.L31
 939              	.LVL119:
 940              	.L34:
 941              	.LBB46:
 201:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 942              		.loc 1 201 9 is_stmt 1 view .LVU309
 201:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 943              		.loc 1 201 34 is_stmt 0 view .LVU310
 944 0104 0368     		ldr	r3, [r0]
 945 0106 C3F38A23 		ubfx	r3, r3, #10, #11
 201:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 946              		.loc 1 201 41 view .LVU311
 947 010a 03FB0216 		mla	r6, r3, r2, r1
 948              	.LVL120:
 202:lvgl/src/draw/lv_img_buf.c ****     }
 949              		.loc 1 202 9 is_stmt 1 view .LVU312
 202:lvgl/src/draw/lv_img_buf.c ****     }
 950              		.loc 1 202 21 is_stmt 0 view .LVU313
 951 010e 08F80650 		strb	r5, [r8, r6]
 952              	.LBE46:
 953              		.loc 1 204 1 view .LVU314
 954 0112 9FE7     		b	.L31
 955              		.cfi_endproc
 956              	.LFE56:
 958              		.section	.text.lv_img_buf_set_px_color,"ax",%progbits
 959              		.align	1
 960              		.global	lv_img_buf_set_px_color
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 965              	lv_img_buf_set_px_color:
 966              	.LVL121:
 967              	.LFB57:
 205:lvgl/src/draw/lv_img_buf.c **** 
 206:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_color(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c)
 207:lvgl/src/draw/lv_img_buf.c **** {
 968              		.loc 1 207 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 8
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		.loc 1 207 1 is_stmt 0 view .LVU316
 973 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 974              	.LCFI9:
 975              		.cfi_def_cfa_offset 20
 976              		.cfi_offset 4, -20
 977              		.cfi_offset 5, -16
 978              		.cfi_offset 6, -12
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 83B0     		sub	sp, sp, #12
 982              	.LCFI10:
 983              		.cfi_def_cfa_offset 32
 984 0004 0546     		mov	r5, r0
 985 0006 0C46     		mov	r4, r1
 986 0008 1646     		mov	r6, r2
 987 000a ADF80430 		strh	r3, [sp, #4]	@ movhi
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 42


 208:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 988              		.loc 1 208 5 is_stmt 1 view .LVU317
 989              		.loc 1 208 15 is_stmt 0 view .LVU318
 990 000e 8768     		ldr	r7, [r0, #8]
 991              	.LVL122:
 209:lvgl/src/draw/lv_img_buf.c **** 
 210:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
 992              		.loc 1 210 5 is_stmt 1 view .LVU319
 993              		.loc 1 210 23 is_stmt 0 view .LVU320
 994 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 995 0012 03F01F03 		and	r3, r3, #31
 996              		.loc 1 210 7 view .LVU321
 997 0016 042B     		cmp	r3, #4
 998 0018 07D0     		beq	.L43
 999 001a 053B     		subs	r3, r3, #5
 1000 001c 052B     		cmp	r3, #5
 1001 001e 1ED8     		bhi	.L42
 1002 0020 DFE803F0 		tbb	[pc, r3]
 1003              	.LVL123:
 1004              	.L46:
 1005 0024 1F       		.byte	(.L50-.L46)/2
 1006 0025 03       		.byte	(.L43-.L46)/2
 1007 0026 3B       		.byte	(.L49-.L46)/2
 1008 0027 58       		.byte	(.L48-.L46)/2
 1009 0028 76       		.byte	(.L47-.L46)/2
 1010 0029 94       		.byte	(.L45-.L46)/2
 1011              		.p2align 1
 1012              	.L43:
 1013              	.LBB47:
 211:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 1014              		.loc 1 211 9 is_stmt 1 view .LVU322
 1015              		.loc 1 211 60 is_stmt 0 view .LVU323
 1016 002a 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1017              	.LVL124:
 1018              		.loc 1 211 27 view .LVU324
 1019 002c 00F01F00 		and	r0, r0, #31
 1020 0030 FFF7FEFF 		bl	lv_img_cf_get_px_size
 1021              	.LVL125:
 1022              		.loc 1 211 17 view .LVU325
 1023 0034 C0F3C700 		ubfx	r0, r0, #3, #8
 1024              	.LVL126:
 212:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1025              		.loc 1 212 9 is_stmt 1 view .LVU326
 1026              		.loc 1 212 38 is_stmt 0 view .LVU327
 1027 0038 2B68     		ldr	r3, [r5]
 1028 003a C3F38A23 		ubfx	r3, r3, #10, #11
 1029              		.loc 1 212 41 view .LVU328
 1030 003e 06FB03F3 		mul	r3, r6, r3
 1031              		.loc 1 212 59 view .LVU329
 1032 0042 00FB04F4 		mul	r4, r0, r4
 1033              		.loc 1 212 55 view .LVU330
 1034 0046 00FB0344 		mla	r4, r0, r3, r4
 1035              	.LVL127:
 213:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1036              		.loc 1 213 9 is_stmt 1 view .LVU331
 1037              		.loc 1 213 25 is_stmt 0 view .LVU332
 1038 004a 3C44     		add	r4, r4, r7
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 43


 1039              	.LVL128:
 1040              	.LBB48:
 1041              	.LBI48:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1042              		.loc 3 193 44 is_stmt 1 view .LVU333
 1043              	.LBB49:
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1044              		.loc 3 195 5 view .LVU334
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1045              		.loc 3 196 5 view .LVU335
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1046              		.loc 3 198 5 view .LVU336
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1047              		.loc 3 196 21 is_stmt 0 view .LVU337
 1048 004c 01AB     		add	r3, sp, #4
 1049              	.LVL129:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1050              		.loc 3 198 10 view .LVU338
 1051 004e 04E0     		b	.L51
 1052              	.LVL130:
 1053              	.L52:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1054              		.loc 3 199 9 is_stmt 1 view .LVU339
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1055              		.loc 3 199 15 is_stmt 0 view .LVU340
 1056 0050 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1057              	.LVL131:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1058              		.loc 3 199 13 view .LVU341
 1059 0054 04F8012B 		strb	r2, [r4], #1
 1060              	.LVL132:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1061              		.loc 3 200 9 is_stmt 1 view .LVU342
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1062              		.loc 3 201 9 view .LVU343
 1063              		.loc 3 202 9 view .LVU344
 1064              		.loc 3 202 12 is_stmt 0 view .LVU345
 1065 0058 0138     		subs	r0, r0, #1
 1066              	.LVL133:
 1067              	.L51:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1068              		.loc 3 198 11 is_stmt 1 view .LVU346
 1069 005a 0028     		cmp	r0, #0
 1070 005c F8D1     		bne	.L52
 1071              	.LVL134:
 1072              	.L42:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1073              		.loc 3 198 11 is_stmt 0 view .LVU347
 1074              	.LBE49:
 1075              	.LBE48:
 1076              	.LBE47:
 214:lvgl/src/draw/lv_img_buf.c ****     }
 215:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 216:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 217:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 218:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 219:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 44


 220:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 221:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 2; /*Skip the palette*/
 222:lvgl/src/draw/lv_img_buf.c **** 
 223:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 224:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 225:lvgl/src/draw/lv_img_buf.c **** 
 226:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 227:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 228:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 229:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 231:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 232:lvgl/src/draw/lv_img_buf.c ****     }
 233:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 234:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 4; /*Skip the palette*/
 235:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 236:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 237:lvgl/src/draw/lv_img_buf.c **** 
 238:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 239:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
 240:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8 ,12 ...*/
 241:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 242:lvgl/src/draw/lv_img_buf.c **** 
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] & ~(3 << (6 - bit));
 244:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 245:lvgl/src/draw/lv_img_buf.c ****     }
 246:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 247:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 16; /*Skip the palette*/
 248:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 249:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 250:lvgl/src/draw/lv_img_buf.c **** 
 251:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 252:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
 253:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 254:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 256:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 257:lvgl/src/draw/lv_img_buf.c ****     }
 258:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 259:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 256; /*Skip the palette*/
 260:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 261:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 262:lvgl/src/draw/lv_img_buf.c ****     }
 263:lvgl/src/draw/lv_img_buf.c **** }
 1077              		.loc 1 263 1 view .LVU348
 1078 005e 03B0     		add	sp, sp, #12
 1079              	.LCFI11:
 1080              		.cfi_remember_state
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL135:
 1085              	.L50:
 1086              	.LCFI12:
 1087              		.cfi_restore_state
 1088              	.LBB50:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 45


 1089              		.loc 1 216 9 is_stmt 1 view .LVU349
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1090              		.loc 1 216 60 is_stmt 0 view .LVU350
 1091 0062 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1092              	.LVL136:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1093              		.loc 1 216 27 view .LVU351
 1094 0064 00F01F00 		and	r0, r0, #31
 1095 0068 FFF7FEFF 		bl	lv_img_cf_get_px_size
 1096              	.LVL137:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1097              		.loc 1 216 17 view .LVU352
 1098 006c C0F3C703 		ubfx	r3, r0, #3, #8
 1099              	.LVL138:
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1100              		.loc 1 217 9 is_stmt 1 view .LVU353
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1101              		.loc 1 217 38 is_stmt 0 view .LVU354
 1102 0070 2968     		ldr	r1, [r5]
 1103 0072 C1F38A21 		ubfx	r1, r1, #10, #11
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1104              		.loc 1 217 41 view .LVU355
 1105 0076 06FB01F1 		mul	r1, r6, r1
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1106              		.loc 1 217 59 view .LVU356
 1107 007a 03FB04F2 		mul	r2, r3, r4
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1108              		.loc 1 217 55 view .LVU357
 1109 007e 03FB0122 		mla	r2, r3, r1, r2
 1110              	.LVL139:
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1111              		.loc 1 218 9 is_stmt 1 view .LVU358
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1112              		.loc 1 218 25 is_stmt 0 view .LVU359
 1113 0082 3A44     		add	r2, r2, r7
 1114              	.LVL140:
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1115              		.loc 1 218 50 view .LVU360
 1116 0084 013B     		subs	r3, r3, #1
 1117              	.LVL141:
 1118              	.LBB51:
 1119              	.LBI51:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1120              		.loc 3 193 44 is_stmt 1 view .LVU361
 1121              	.LBB52:
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1122              		.loc 3 195 5 view .LVU362
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1123              		.loc 3 196 5 view .LVU363
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1124              		.loc 3 198 5 view .LVU364
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1125              		.loc 3 196 21 is_stmt 0 view .LVU365
 1126 0086 01A9     		add	r1, sp, #4
 1127              	.LVL142:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1128              		.loc 3 198 10 view .LVU366
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 46


 1129 0088 04E0     		b	.L53
 1130              	.LVL143:
 1131              	.L54:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1132              		.loc 3 199 9 is_stmt 1 view .LVU367
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1133              		.loc 3 199 15 is_stmt 0 view .LVU368
 1134 008a 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1135              	.LVL144:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1136              		.loc 3 199 13 view .LVU369
 1137 008e 02F8010B 		strb	r0, [r2], #1
 1138              	.LVL145:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1139              		.loc 3 200 9 is_stmt 1 view .LVU370
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1140              		.loc 3 201 9 view .LVU371
 1141              		.loc 3 202 9 view .LVU372
 1142              		.loc 3 202 12 is_stmt 0 view .LVU373
 1143 0092 013B     		subs	r3, r3, #1
 1144              	.LVL146:
 1145              	.L53:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1146              		.loc 3 198 11 is_stmt 1 view .LVU374
 1147 0094 002B     		cmp	r3, #0
 1148 0096 F8D1     		bne	.L54
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1149              		.loc 3 198 11 is_stmt 0 view .LVU375
 1150 0098 E1E7     		b	.L42
 1151              	.LVL147:
 1152              	.L49:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1153              		.loc 3 198 11 view .LVU376
 1154              	.LBE52:
 1155              	.LBE51:
 1156              	.LBE50:
 1157              	.LBB53:
 221:lvgl/src/draw/lv_img_buf.c **** 
 1158              		.loc 1 221 9 is_stmt 1 view .LVU377
 221:lvgl/src/draw/lv_img_buf.c **** 
 1159              		.loc 1 221 16 is_stmt 0 view .LVU378
 1160 009a 0837     		adds	r7, r7, #8
 1161              	.LVL148:
 223:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1162              		.loc 1 223 9 is_stmt 1 view .LVU379
 223:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1163              		.loc 1 223 17 is_stmt 0 view .LVU380
 1164 009c 01F00700 		and	r0, r1, #7
 1165              	.LVL149:
 224:lvgl/src/draw/lv_img_buf.c **** 
 1166              		.loc 1 224 9 is_stmt 1 view .LVU381
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1167              		.loc 1 229 9 view .LVU382
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1168              		.loc 1 229 36 is_stmt 0 view .LVU383
 1169 00a0 2B68     		ldr	r3, [r5]
 1170 00a2 C3F38A23 		ubfx	r3, r3, #10, #11
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 47


 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1171              		.loc 1 229 39 view .LVU384
 1172 00a6 0733     		adds	r3, r3, #7
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1173              		.loc 1 229 44 view .LVU385
 1174 00a8 DB10     		asrs	r3, r3, #3
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1175              		.loc 1 229 50 view .LVU386
 1176 00aa 06FB03F3 		mul	r3, r6, r3
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1177              		.loc 1 229 54 view .LVU387
 1178 00ae 03EBE103 		add	r3, r3, r1, asr #3
 1179              	.LVL150:
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1180              		.loc 1 230 9 is_stmt 1 view .LVU388
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1181              		.loc 1 230 29 is_stmt 0 view .LVU389
 1182 00b2 F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1183              	.LVL151:
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1184              		.loc 1 230 46 view .LVU390
 1185 00b4 C0F10700 		rsb	r0, r0, #7
 1186              	.LVL152:
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1187              		.loc 1 230 40 view .LVU391
 1188 00b8 0122     		movs	r2, #1
 1189 00ba 8240     		lsls	r2, r2, r0
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1190              		.loc 1 230 34 view .LVU392
 1191 00bc D243     		mvns	r2, r2
 1192 00be 52B2     		sxtb	r2, r2
 1193 00c0 0A40     		ands	r2, r2, r1
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1194              		.loc 1 230 21 view .LVU393
 1195 00c2 FA54     		strb	r2, [r7, r3]
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1196              		.loc 1 231 9 is_stmt 1 view .LVU394
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1197              		.loc 1 231 39 is_stmt 0 view .LVU395
 1198 00c4 BDF80410 		ldrh	r1, [sp, #4]
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1199              		.loc 1 231 45 view .LVU396
 1200 00c8 01F00101 		and	r1, r1, #1
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1201              		.loc 1 231 52 view .LVU397
 1202 00cc 8140     		lsls	r1, r1, r0
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1203              		.loc 1 231 34 view .LVU398
 1204 00ce 0A43     		orrs	r2, r2, r1
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1205              		.loc 1 231 21 view .LVU399
 1206 00d0 FA54     		strb	r2, [r7, r3]
 1207              	.LBE53:
 1208 00d2 C4E7     		b	.L42
 1209              	.LVL153:
 1210              	.L48:
 1211              	.LBB54:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 48


 234:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1212              		.loc 1 234 9 is_stmt 1 view .LVU400
 234:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1213              		.loc 1 234 16 is_stmt 0 view .LVU401
 1214 00d4 1037     		adds	r7, r7, #16
 1215              	.LVL154:
 235:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1216              		.loc 1 235 9 is_stmt 1 view .LVU402
 235:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1217              		.loc 1 235 17 is_stmt 0 view .LVU403
 1218 00d6 01F00300 		and	r0, r1, #3
 1219              	.LVL155:
 235:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1220              		.loc 1 235 17 view .LVU404
 1221 00da 4000     		lsls	r0, r0, #1
 1222              	.LVL156:
 236:lvgl/src/draw/lv_img_buf.c **** 
 1223              		.loc 1 236 9 is_stmt 1 view .LVU405
 241:lvgl/src/draw/lv_img_buf.c **** 
 1224              		.loc 1 241 9 view .LVU406
 241:lvgl/src/draw/lv_img_buf.c **** 
 1225              		.loc 1 241 36 is_stmt 0 view .LVU407
 1226 00dc 2B68     		ldr	r3, [r5]
 1227 00de C3F38A23 		ubfx	r3, r3, #10, #11
 241:lvgl/src/draw/lv_img_buf.c **** 
 1228              		.loc 1 241 39 view .LVU408
 1229 00e2 0333     		adds	r3, r3, #3
 241:lvgl/src/draw/lv_img_buf.c **** 
 1230              		.loc 1 241 44 view .LVU409
 1231 00e4 9B10     		asrs	r3, r3, #2
 241:lvgl/src/draw/lv_img_buf.c **** 
 1232              		.loc 1 241 50 view .LVU410
 1233 00e6 06FB03F3 		mul	r3, r6, r3
 241:lvgl/src/draw/lv_img_buf.c **** 
 1234              		.loc 1 241 54 view .LVU411
 1235 00ea 03EBA103 		add	r3, r3, r1, asr #2
 1236              	.LVL157:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1237              		.loc 1 243 9 is_stmt 1 view .LVU412
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1238              		.loc 1 243 28 is_stmt 0 view .LVU413
 1239 00ee F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1240              	.LVL158:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1241              		.loc 1 243 45 view .LVU414
 1242 00f0 C0F10600 		rsb	r0, r0, #6
 1243              	.LVL159:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1244              		.loc 1 243 39 view .LVU415
 1245 00f4 0322     		movs	r2, #3
 1246 00f6 8240     		lsls	r2, r2, r0
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1247              		.loc 1 243 33 view .LVU416
 1248 00f8 D243     		mvns	r2, r2
 1249 00fa 52B2     		sxtb	r2, r2
 1250 00fc 0A40     		ands	r2, r2, r1
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 49


 1251              		.loc 1 243 20 view .LVU417
 1252 00fe FA54     		strb	r2, [r7, r3]
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1253              		.loc 1 244 9 is_stmt 1 view .LVU418
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1254              		.loc 1 244 38 is_stmt 0 view .LVU419
 1255 0100 BDF80410 		ldrh	r1, [sp, #4]
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1256              		.loc 1 244 44 view .LVU420
 1257 0104 01F00301 		and	r1, r1, #3
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1258              		.loc 1 244 51 view .LVU421
 1259 0108 8140     		lsls	r1, r1, r0
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1260              		.loc 1 244 33 view .LVU422
 1261 010a 0A43     		orrs	r2, r2, r1
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1262              		.loc 1 244 20 view .LVU423
 1263 010c FA54     		strb	r2, [r7, r3]
 1264              	.LBE54:
 1265 010e A6E7     		b	.L42
 1266              	.LVL160:
 1267              	.L47:
 1268              	.LBB55:
 247:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1269              		.loc 1 247 9 is_stmt 1 view .LVU424
 247:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1270              		.loc 1 247 16 is_stmt 0 view .LVU425
 1271 0110 4037     		adds	r7, r7, #64
 1272              	.LVL161:
 248:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1273              		.loc 1 248 9 is_stmt 1 view .LVU426
 248:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1274              		.loc 1 248 17 is_stmt 0 view .LVU427
 1275 0112 01F00100 		and	r0, r1, #1
 1276              	.LVL162:
 248:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1277              		.loc 1 248 17 view .LVU428
 1278 0116 8000     		lsls	r0, r0, #2
 1279              	.LVL163:
 249:lvgl/src/draw/lv_img_buf.c **** 
 1280              		.loc 1 249 9 is_stmt 1 view .LVU429
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1281              		.loc 1 254 9 view .LVU430
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1282              		.loc 1 254 36 is_stmt 0 view .LVU431
 1283 0118 2B68     		ldr	r3, [r5]
 1284 011a C3F38A23 		ubfx	r3, r3, #10, #11
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1285              		.loc 1 254 39 view .LVU432
 1286 011e 0133     		adds	r3, r3, #1
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1287              		.loc 1 254 44 view .LVU433
 1288 0120 5B10     		asrs	r3, r3, #1
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1289              		.loc 1 254 50 view .LVU434
 1290 0122 06FB03F3 		mul	r3, r6, r3
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 50


 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1291              		.loc 1 254 54 view .LVU435
 1292 0126 03EB6103 		add	r3, r3, r1, asr #1
 1293              	.LVL164:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1294              		.loc 1 255 9 is_stmt 1 view .LVU436
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1295              		.loc 1 255 29 is_stmt 0 view .LVU437
 1296 012a F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1297              	.LVL165:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1298              		.loc 1 255 48 view .LVU438
 1299 012c C0F10400 		rsb	r0, r0, #4
 1300              	.LVL166:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1301              		.loc 1 255 42 view .LVU439
 1302 0130 0F22     		movs	r2, #15
 1303 0132 8240     		lsls	r2, r2, r0
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1304              		.loc 1 255 34 view .LVU440
 1305 0134 D243     		mvns	r2, r2
 1306 0136 52B2     		sxtb	r2, r2
 1307 0138 0A40     		ands	r2, r2, r1
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1308              		.loc 1 255 21 view .LVU441
 1309 013a FA54     		strb	r2, [r7, r3]
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1310              		.loc 1 256 9 is_stmt 1 view .LVU442
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1311              		.loc 1 256 39 is_stmt 0 view .LVU443
 1312 013c BDF80410 		ldrh	r1, [sp, #4]
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1313              		.loc 1 256 45 view .LVU444
 1314 0140 01F00F01 		and	r1, r1, #15
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1315              		.loc 1 256 52 view .LVU445
 1316 0144 8140     		lsls	r1, r1, r0
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1317              		.loc 1 256 34 view .LVU446
 1318 0146 0A43     		orrs	r2, r2, r1
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1319              		.loc 1 256 21 view .LVU447
 1320 0148 FA54     		strb	r2, [r7, r3]
 1321              	.LBE55:
 1322 014a 88E7     		b	.L42
 1323              	.LVL167:
 1324              	.L45:
 1325              	.LBB56:
 259:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 1326              		.loc 1 259 9 is_stmt 1 view .LVU448
 260:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1327              		.loc 1 260 9 view .LVU449
 260:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1328              		.loc 1 260 34 is_stmt 0 view .LVU450
 1329 014c 0368     		ldr	r3, [r0]
 1330 014e C3F38A23 		ubfx	r3, r3, #10, #11
 260:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 51


 1331              		.loc 1 260 41 view .LVU451
 1332 0152 03FB0614 		mla	r4, r3, r6, r1
 1333              	.LVL168:
 261:lvgl/src/draw/lv_img_buf.c ****     }
 1334              		.loc 1 261 9 is_stmt 1 view .LVU452
 261:lvgl/src/draw/lv_img_buf.c ****     }
 1335              		.loc 1 261 24 is_stmt 0 view .LVU453
 1336 0156 BDF80430 		ldrh	r3, [sp, #4]
 261:lvgl/src/draw/lv_img_buf.c ****     }
 1337              		.loc 1 261 15 view .LVU454
 1338 015a 04F58064 		add	r4, r4, #1024
 1339              	.LVL169:
 261:lvgl/src/draw/lv_img_buf.c ****     }
 1340              		.loc 1 261 21 view .LVU455
 1341 015e 3B55     		strb	r3, [r7, r4]
 1342              	.LBE56:
 1343              		.loc 1 263 1 view .LVU456
 1344 0160 7DE7     		b	.L42
 1345              		.cfi_endproc
 1346              	.LFE57:
 1348              		.section	.text.lv_img_buf_set_palette,"ax",%progbits
 1349              		.align	1
 1350              		.global	lv_img_buf_set_palette
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1355              	lv_img_buf_set_palette:
 1356              	.LVL170:
 1357              	.LFB58:
 264:lvgl/src/draw/lv_img_buf.c **** 
 265:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_palette(const lv_img_dsc_t * dsc, uint8_t id, lv_color_t c)
 266:lvgl/src/draw/lv_img_buf.c **** {
 1358              		.loc 1 266 1 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 8
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		.loc 1 266 1 is_stmt 0 view .LVU458
 1363 0000 30B5     		push	{r4, r5, lr}
 1364              	.LCFI13:
 1365              		.cfi_def_cfa_offset 12
 1366              		.cfi_offset 4, -12
 1367              		.cfi_offset 5, -8
 1368              		.cfi_offset 14, -4
 1369 0002 83B0     		sub	sp, sp, #12
 1370              	.LCFI14:
 1371              		.cfi_def_cfa_offset 24
 1372 0004 0446     		mov	r4, r0
 1373 0006 0D46     		mov	r5, r1
 1374 0008 1046     		mov	r0, r2	@ movhi
 1375              	.LVL171:
 267:lvgl/src/draw/lv_img_buf.c ****     if((dsc->header.cf == LV_IMG_CF_ALPHA_1BIT && id > 1) || (dsc->header.cf == LV_IMG_CF_ALPHA_2BI
 1376              		.loc 1 267 5 is_stmt 1 view .LVU459
 1377              		.loc 1 267 24 is_stmt 0 view .LVU460
 1378 000a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1379 000c 03F01F03 		and	r3, r3, #31
 1380              		.loc 1 267 7 view .LVU461
 1381 0010 0B2B     		cmp	r3, #11
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 52


 1382 0012 0ED0     		beq	.L68
 1383              	.L59:
 1384              		.loc 1 267 59 discriminator 3 view .LVU462
 1385 0014 0C2B     		cmp	r3, #12
 1386 0016 0FD0     		beq	.L69
 1387              	.L61:
 1388              		.loc 1 267 113 discriminator 6 view .LVU463
 1389 0018 0D2B     		cmp	r3, #13
 1390 001a 10D0     		beq	.L70
 1391              	.L62:
 268:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1392              		.loc 1 268 60 discriminator 1 view .LVU464
 1393 001c 0E2B     		cmp	r3, #14
 1394 001e 18D0     		beq	.L58
 269:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 270:lvgl/src/draw/lv_img_buf.c ****         return;
 271:lvgl/src/draw/lv_img_buf.c ****     }
 272:lvgl/src/draw/lv_img_buf.c **** 
 273:lvgl/src/draw/lv_img_buf.c ****     lv_color32_t c32;
 1395              		.loc 1 273 5 is_stmt 1 view .LVU465
 274:lvgl/src/draw/lv_img_buf.c ****     c32.full      = lv_color_to32(c);
 1396              		.loc 1 274 5 view .LVU466
 1397              		.loc 1 274 21 is_stmt 0 view .LVU467
 1398 0020 FFF7FEFF 		bl	lv_color_to32
 1399              	.LVL172:
 1400              		.loc 1 274 19 view .LVU468
 1401 0024 0190     		str	r0, [sp, #4]
 275:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf = (uint8_t *)dsc->data;
 1402              		.loc 1 275 5 is_stmt 1 view .LVU469
 1403              		.loc 1 275 15 is_stmt 0 view .LVU470
 1404 0026 A268     		ldr	r2, [r4, #8]
 1405              	.LVL173:
 276:lvgl/src/draw/lv_img_buf.c ****     lv_memcpy_small(&buf[id * sizeof(c32)], &c32, sizeof(c32));
 1406              		.loc 1 276 5 is_stmt 1 view .LVU471
 1407              		.loc 1 276 21 is_stmt 0 view .LVU472
 1408 0028 02EB8502 		add	r2, r2, r5, lsl #2
 1409              	.LVL174:
 1410              	.LBB57:
 1411              	.LBI57:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1412              		.loc 3 193 44 is_stmt 1 view .LVU473
 1413              	.LBB58:
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1414              		.loc 3 195 5 view .LVU474
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1415              		.loc 3 196 5 view .LVU475
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1416              		.loc 3 198 5 view .LVU476
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1417              		.loc 3 196 21 is_stmt 0 view .LVU477
 1418 002c 01A9     		add	r1, sp, #4
 1419              	.LVL175:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1420              		.loc 3 198 10 view .LVU478
 1421 002e 0423     		movs	r3, #4
 1422 0030 0DE0     		b	.L65
 1423              	.LVL176:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 53


 1424              	.L68:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1425              		.loc 3 198 10 view .LVU479
 1426              	.LBE58:
 1427              	.LBE57:
 267:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1428              		.loc 1 267 48 discriminator 1 view .LVU480
 1429 0032 0129     		cmp	r1, #1
 1430 0034 EED9     		bls	.L59
 1431 0036 0CE0     		b	.L58
 1432              	.L69:
 267:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1433              		.loc 1 267 102 discriminator 4 view .LVU481
 1434 0038 032D     		cmp	r5, #3
 1435 003a EDD9     		bls	.L61
 1436 003c 09E0     		b	.L58
 1437              	.L70:
 268:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 1438              		.loc 1 268 48 view .LVU482
 1439 003e 0F2D     		cmp	r5, #15
 1440 0040 ECD9     		bls	.L62
 1441 0042 06E0     		b	.L58
 1442              	.LVL177:
 1443              	.L66:
 1444              	.LBB60:
 1445              	.LBB59:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1446              		.loc 3 199 9 is_stmt 1 view .LVU483
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1447              		.loc 3 199 15 is_stmt 0 view .LVU484
 1448 0044 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1449              	.LVL178:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1450              		.loc 3 199 13 view .LVU485
 1451 0048 02F8010B 		strb	r0, [r2], #1
 1452              	.LVL179:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1453              		.loc 3 200 9 is_stmt 1 view .LVU486
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1454              		.loc 3 201 9 view .LVU487
 1455              		.loc 3 202 9 view .LVU488
 1456              		.loc 3 202 12 is_stmt 0 view .LVU489
 1457 004c 013B     		subs	r3, r3, #1
 1458              	.LVL180:
 1459              	.L65:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1460              		.loc 3 198 11 is_stmt 1 view .LVU490
 1461 004e 002B     		cmp	r3, #0
 1462 0050 F8D1     		bne	.L66
 1463              	.LVL181:
 1464              	.L58:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1465              		.loc 3 198 11 is_stmt 0 view .LVU491
 1466              	.LBE59:
 1467              	.LBE60:
 277:lvgl/src/draw/lv_img_buf.c **** }
 1468              		.loc 1 277 1 view .LVU492
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 54


 1469 0052 03B0     		add	sp, sp, #12
 1470              	.LCFI15:
 1471              		.cfi_def_cfa_offset 12
 1472              		@ sp needed
 1473 0054 30BD     		pop	{r4, r5, pc}
 1474              		.loc 1 277 1 view .LVU493
 1475              		.cfi_endproc
 1476              	.LFE58:
 1478              		.section	.text.lv_img_buf_free,"ax",%progbits
 1479              		.align	1
 1480              		.global	lv_img_buf_free
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1485              	lv_img_buf_free:
 1486              	.LVL182:
 1487              	.LFB60:
 278:lvgl/src/draw/lv_img_buf.c **** 
 279:lvgl/src/draw/lv_img_buf.c **** lv_img_dsc_t * lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 280:lvgl/src/draw/lv_img_buf.c **** {
 281:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 282:lvgl/src/draw/lv_img_buf.c ****     lv_img_dsc_t * dsc = lv_mem_alloc(sizeof(lv_img_dsc_t));
 283:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 284:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 285:lvgl/src/draw/lv_img_buf.c **** 
 286:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00(dsc, sizeof(lv_img_dsc_t));
 287:lvgl/src/draw/lv_img_buf.c **** 
 288:lvgl/src/draw/lv_img_buf.c ****     /*Get image data size*/
 289:lvgl/src/draw/lv_img_buf.c ****     dsc->data_size = lv_img_buf_get_img_size(w, h, cf);
 290:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 291:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 292:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 293:lvgl/src/draw/lv_img_buf.c ****     }
 294:lvgl/src/draw/lv_img_buf.c **** 
 295:lvgl/src/draw/lv_img_buf.c ****     /*Allocate raw buffer*/
 296:lvgl/src/draw/lv_img_buf.c ****     dsc->data = lv_mem_alloc(dsc->data_size);
 297:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 298:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 299:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 300:lvgl/src/draw/lv_img_buf.c ****     }
 301:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00((uint8_t *)dsc->data, dsc->data_size);
 302:lvgl/src/draw/lv_img_buf.c **** 
 303:lvgl/src/draw/lv_img_buf.c ****     /*Fill in header*/
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.always_zero = 0;
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 307:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 308:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 309:lvgl/src/draw/lv_img_buf.c **** }
 310:lvgl/src/draw/lv_img_buf.c **** 
 311:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_free(lv_img_dsc_t * dsc)
 312:lvgl/src/draw/lv_img_buf.c **** {
 1488              		.loc 1 312 1 is_stmt 1 view -0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
 313:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 55


 1492              		.loc 1 313 5 view .LVU495
 1493              		.loc 1 313 7 is_stmt 0 view .LVU496
 1494 0000 48B1     		cbz	r0, .L75
 312:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
 1495              		.loc 1 312 1 view .LVU497
 1496 0002 10B5     		push	{r4, lr}
 1497              	.LCFI16:
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 4, -8
 1500              		.cfi_offset 14, -4
 1501 0004 0446     		mov	r4, r0
 314:lvgl/src/draw/lv_img_buf.c ****         if(dsc->data != NULL)
 1502              		.loc 1 314 9 is_stmt 1 view .LVU498
 1503              		.loc 1 314 15 is_stmt 0 view .LVU499
 1504 0006 8068     		ldr	r0, [r0, #8]
 1505              	.LVL183:
 1506              		.loc 1 314 11 view .LVU500
 1507 0008 08B1     		cbz	r0, .L73
 315:lvgl/src/draw/lv_img_buf.c ****             lv_mem_free((void *)dsc->data);
 1508              		.loc 1 315 13 is_stmt 1 view .LVU501
 1509 000a FFF7FEFF 		bl	lv_mem_free
 1510              	.LVL184:
 1511              	.L73:
 316:lvgl/src/draw/lv_img_buf.c **** 
 317:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1512              		.loc 1 317 9 view .LVU502
 1513 000e 2046     		mov	r0, r4
 1514 0010 FFF7FEFF 		bl	lv_mem_free
 1515              	.LVL185:
 318:lvgl/src/draw/lv_img_buf.c ****     }
 319:lvgl/src/draw/lv_img_buf.c **** }
 1516              		.loc 1 319 1 is_stmt 0 view .LVU503
 1517 0014 10BD     		pop	{r4, pc}
 1518              	.LVL186:
 1519              	.L75:
 1520              	.LCFI17:
 1521              		.cfi_def_cfa_offset 0
 1522              		.cfi_restore 4
 1523              		.cfi_restore 14
 1524              		.loc 1 319 1 view .LVU504
 1525 0016 7047     		bx	lr
 1526              		.cfi_endproc
 1527              	.LFE60:
 1529              		.section	.text.lv_img_buf_get_img_size,"ax",%progbits
 1530              		.align	1
 1531              		.global	lv_img_buf_get_img_size
 1532              		.syntax unified
 1533              		.thumb
 1534              		.thumb_func
 1536              	lv_img_buf_get_img_size:
 1537              	.LVL187:
 1538              	.LFB61:
 320:lvgl/src/draw/lv_img_buf.c **** 
 321:lvgl/src/draw/lv_img_buf.c **** uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 322:lvgl/src/draw/lv_img_buf.c **** {
 1539              		.loc 1 322 1 is_stmt 1 view -0
 1540              		.cfi_startproc
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 56


 1541              		@ args = 0, pretend = 0, frame = 0
 1542              		@ frame_needed = 0, uses_anonymous_args = 0
 1543              		@ link register save eliminated.
 323:lvgl/src/draw/lv_img_buf.c ****     switch(cf) {
 1544              		.loc 1 323 5 view .LVU506
 1545 0000 043A     		subs	r2, r2, #4
 1546              	.LVL188:
 1547              		.loc 1 323 5 is_stmt 0 view .LVU507
 1548 0002 102A     		cmp	r2, #16
 1549 0004 54D8     		bhi	.L96
 1550 0006 DFE802F0 		tbb	[pc, r2]
 1551              	.L81:
 1552 000a 09       		.byte	(.L91-.L81)/2
 1553 000b 0D       		.byte	(.L80-.L81)/2
 1554 000c 12       		.byte	(.L90-.L81)/2
 1555 000d 31       		.byte	(.L89-.L81)/2
 1556 000e 3C       		.byte	(.L88-.L81)/2
 1557 000f 47       		.byte	(.L87-.L81)/2
 1558 0010 4E       		.byte	(.L86-.L81)/2
 1559 0011 16       		.byte	(.L85-.L81)/2
 1560 0012 1F       		.byte	(.L84-.L81)/2
 1561 0013 28       		.byte	(.L83-.L81)/2
 1562 0014 2E       		.byte	(.L82-.L81)/2
 1563 0015 53       		.byte	(.L96-.L81)/2
 1564 0016 53       		.byte	(.L96-.L81)/2
 1565 0017 53       		.byte	(.L96-.L81)/2
 1566 0018 53       		.byte	(.L96-.L81)/2
 1567 0019 53       		.byte	(.L96-.L81)/2
 1568 001a 0D       		.byte	(.L80-.L81)/2
 1569 001b 00       		.p2align 1
 1570              	.L91:
 324:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 325:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR(w, h);
 1571              		.loc 1 325 13 is_stmt 1 view .LVU508
 1572              		.loc 1 325 20 is_stmt 0 view .LVU509
 1573 001c 01FB00F0 		mul	r0, r1, r0
 1574              	.LVL189:
 1575              		.loc 1 325 20 view .LVU510
 1576 0020 4000     		lsls	r0, r0, #1
 1577 0022 7047     		bx	lr
 1578              	.LVL190:
 1579              	.L80:
 326:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 327:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_RGB565A8:
 328:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h);
 1580              		.loc 1 328 13 is_stmt 1 view .LVU511
 1581              		.loc 1 328 20 is_stmt 0 view .LVU512
 1582 0024 00FB01F1 		mul	r1, r0, r1
 1583              	.LVL191:
 1584              		.loc 1 328 20 view .LVU513
 1585 0028 01EB4100 		add	r0, r1, r1, lsl #1
 1586              	.LVL192:
 1587              		.loc 1 328 20 view .LVU514
 1588 002c 7047     		bx	lr
 1589              	.LVL193:
 1590              	.L90:
 329:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 57


 330:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h);
 1591              		.loc 1 330 13 is_stmt 1 view .LVU515
 1592              		.loc 1 330 20 is_stmt 0 view .LVU516
 1593 002e 01FB00F0 		mul	r0, r1, r0
 1594              	.LVL194:
 1595              		.loc 1 330 20 view .LVU517
 1596 0032 4000     		lsls	r0, r0, #1
 1597 0034 7047     		bx	lr
 1598              	.LVL195:
 1599              	.L85:
 331:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_1BIT:
 332:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h);
 1600              		.loc 1 332 13 is_stmt 1 view .LVU518
 1601              		.loc 1 332 20 is_stmt 0 view .LVU519
 1602 0036 0346     		mov	r3, r0
 1603 0038 0028     		cmp	r0, #0
 1604 003a 03DB     		blt	.L97
 1605              	.L92:
 1606 003c DB10     		asrs	r3, r3, #3
 1607 003e 03FB0110 		mla	r0, r3, r1, r1
 1608              	.LVL196:
 1609              		.loc 1 332 20 view .LVU520
 1610 0042 7047     		bx	lr
 1611              	.LVL197:
 1612              	.L97:
 1613              		.loc 1 332 20 view .LVU521
 1614 0044 C31D     		adds	r3, r0, #7
 1615 0046 F9E7     		b	.L92
 1616              	.L84:
 333:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_2BIT:
 334:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h);
 1617              		.loc 1 334 13 is_stmt 1 view .LVU522
 1618              		.loc 1 334 20 is_stmt 0 view .LVU523
 1619 0048 0346     		mov	r3, r0
 1620 004a 0028     		cmp	r0, #0
 1621 004c 03DB     		blt	.L98
 1622              	.L93:
 1623 004e 9B10     		asrs	r3, r3, #2
 1624 0050 03FB0110 		mla	r0, r3, r1, r1
 1625              	.LVL198:
 1626              		.loc 1 334 20 view .LVU524
 1627 0054 7047     		bx	lr
 1628              	.LVL199:
 1629              	.L98:
 1630              		.loc 1 334 20 view .LVU525
 1631 0056 C31C     		adds	r3, r0, #3
 1632 0058 F9E7     		b	.L93
 1633              	.L83:
 335:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_4BIT:
 336:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h);
 1634              		.loc 1 336 13 is_stmt 1 view .LVU526
 1635              		.loc 1 336 20 is_stmt 0 view .LVU527
 1636 005a 00EBD070 		add	r0, r0, r0, lsr #31
 1637              	.LVL200:
 1638              		.loc 1 336 20 view .LVU528
 1639 005e 4010     		asrs	r0, r0, #1
 1640 0060 00FB0110 		mla	r0, r0, r1, r1
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 58


 1641 0064 7047     		bx	lr
 1642              	.LVL201:
 1643              	.L82:
 337:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_8BIT:
 338:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h);
 1644              		.loc 1 338 13 is_stmt 1 view .LVU529
 1645              		.loc 1 338 20 is_stmt 0 view .LVU530
 1646 0066 01FB00F0 		mul	r0, r1, r0
 1647              	.LVL202:
 1648              		.loc 1 338 20 view .LVU531
 1649 006a 7047     		bx	lr
 1650              	.LVL203:
 1651              	.L89:
 339:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_1BIT:
 340:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h);
 1652              		.loc 1 340 13 is_stmt 1 view .LVU532
 1653              		.loc 1 340 20 is_stmt 0 view .LVU533
 1654 006c 0346     		mov	r3, r0
 1655 006e 0028     		cmp	r0, #0
 1656 0070 05DB     		blt	.L99
 1657              	.L94:
 1658 0072 DB10     		asrs	r3, r3, #3
 1659 0074 03FB0113 		mla	r3, r3, r1, r1
 1660 0078 03F10800 		add	r0, r3, #8
 1661              	.LVL204:
 1662              		.loc 1 340 20 view .LVU534
 1663 007c 7047     		bx	lr
 1664              	.LVL205:
 1665              	.L99:
 1666              		.loc 1 340 20 view .LVU535
 1667 007e C31D     		adds	r3, r0, #7
 1668 0080 F7E7     		b	.L94
 1669              	.L88:
 341:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_2BIT:
 342:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_2BIT(w, h);
 1670              		.loc 1 342 13 is_stmt 1 view .LVU536
 1671              		.loc 1 342 20 is_stmt 0 view .LVU537
 1672 0082 0346     		mov	r3, r0
 1673 0084 0028     		cmp	r0, #0
 1674 0086 05DB     		blt	.L100
 1675              	.L95:
 1676 0088 9B10     		asrs	r3, r3, #2
 1677 008a 03FB0113 		mla	r3, r3, r1, r1
 1678 008e 03F11000 		add	r0, r3, #16
 1679              	.LVL206:
 1680              		.loc 1 342 20 view .LVU538
 1681 0092 7047     		bx	lr
 1682              	.LVL207:
 1683              	.L100:
 1684              		.loc 1 342 20 view .LVU539
 1685 0094 C31C     		adds	r3, r0, #3
 1686 0096 F7E7     		b	.L95
 1687              	.L87:
 343:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_4BIT:
 344:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_4BIT(w, h);
 1688              		.loc 1 344 13 is_stmt 1 view .LVU540
 1689              		.loc 1 344 20 is_stmt 0 view .LVU541
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 59


 1690 0098 00EBD070 		add	r0, r0, r0, lsr #31
 1691              	.LVL208:
 1692              		.loc 1 344 20 view .LVU542
 1693 009c 4010     		asrs	r0, r0, #1
 1694 009e 00FB0110 		mla	r0, r0, r1, r1
 1695 00a2 4030     		adds	r0, r0, #64
 1696 00a4 7047     		bx	lr
 1697              	.LVL209:
 1698              	.L86:
 345:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_8BIT:
 346:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_8BIT(w, h);
 1699              		.loc 1 346 13 is_stmt 1 view .LVU543
 1700              		.loc 1 346 20 is_stmt 0 view .LVU544
 1701 00a6 01FB00F0 		mul	r0, r1, r0
 1702              	.LVL210:
 1703              		.loc 1 346 20 view .LVU545
 1704 00aa 00F58060 		add	r0, r0, #1024
 1705 00ae 7047     		bx	lr
 1706              	.LVL211:
 1707              	.L96:
 323:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 1708              		.loc 1 323 5 view .LVU546
 1709 00b0 0020     		movs	r0, #0
 1710              	.LVL212:
 347:lvgl/src/draw/lv_img_buf.c ****         default:
 348:lvgl/src/draw/lv_img_buf.c ****             return 0;
 349:lvgl/src/draw/lv_img_buf.c ****     }
 350:lvgl/src/draw/lv_img_buf.c **** }
 1711              		.loc 1 350 1 view .LVU547
 1712 00b2 7047     		bx	lr
 1713              		.cfi_endproc
 1714              	.LFE61:
 1716              		.section	.text.lv_img_buf_alloc,"ax",%progbits
 1717              		.align	1
 1718              		.global	lv_img_buf_alloc
 1719              		.syntax unified
 1720              		.thumb
 1721              		.thumb_func
 1723              	lv_img_buf_alloc:
 1724              	.LVL213:
 1725              	.LFB59:
 280:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1726              		.loc 1 280 1 is_stmt 1 view -0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 280:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1730              		.loc 1 280 1 is_stmt 0 view .LVU549
 1731 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1732              	.LCFI18:
 1733              		.cfi_def_cfa_offset 24
 1734              		.cfi_offset 4, -24
 1735              		.cfi_offset 5, -20
 1736              		.cfi_offset 6, -16
 1737              		.cfi_offset 7, -12
 1738              		.cfi_offset 8, -8
 1739              		.cfi_offset 14, -4
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 60


 1740 0004 0746     		mov	r7, r0
 1741 0006 0E46     		mov	r6, r1
 1742 0008 1546     		mov	r5, r2
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1743              		.loc 1 282 5 is_stmt 1 view .LVU550
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1744              		.loc 1 282 26 is_stmt 0 view .LVU551
 1745 000a 0C20     		movs	r0, #12
 1746              	.LVL214:
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1747              		.loc 1 282 26 view .LVU552
 1748 000c FFF7FEFF 		bl	lv_mem_alloc
 1749              	.LVL215:
 283:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1750              		.loc 1 283 5 is_stmt 1 view .LVU553
 283:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1751              		.loc 1 283 7 is_stmt 0 view .LVU554
 1752 0010 0446     		mov	r4, r0
 1753 0012 08B3     		cbz	r0, .L101
 286:lvgl/src/draw/lv_img_buf.c **** 
 1754              		.loc 1 286 5 is_stmt 1 view .LVU555
 1755 0014 0C21     		movs	r1, #12
 1756 0016 FFF7FEFF 		bl	lv_memset_00
 1757              	.LVL216:
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1758              		.loc 1 289 5 view .LVU556
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1759              		.loc 1 289 22 is_stmt 0 view .LVU557
 1760 001a 2A46     		mov	r2, r5
 1761 001c 3146     		mov	r1, r6
 1762 001e 3846     		mov	r0, r7
 1763 0020 FFF7FEFF 		bl	lv_img_buf_get_img_size
 1764              	.LVL217:
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1765              		.loc 1 289 20 view .LVU558
 1766 0024 6060     		str	r0, [r4, #4]
 290:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1767              		.loc 1 290 5 is_stmt 1 view .LVU559
 290:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1768              		.loc 1 290 7 is_stmt 0 view .LVU560
 1769 0026 D0B1     		cbz	r0, .L106
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1770              		.loc 1 296 5 is_stmt 1 view .LVU561
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1771              		.loc 1 296 17 is_stmt 0 view .LVU562
 1772 0028 FFF7FEFF 		bl	lv_mem_alloc
 1773              	.LVL218:
 1774 002c 8046     		mov	r8, r0
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1775              		.loc 1 296 15 view .LVU563
 1776 002e A060     		str	r0, [r4, #8]
 297:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1777              		.loc 1 297 5 is_stmt 1 view .LVU564
 297:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1778              		.loc 1 297 7 is_stmt 0 view .LVU565
 1779 0030 D0B1     		cbz	r0, .L107
 301:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 61


 1780              		.loc 1 301 5 is_stmt 1 view .LVU566
 1781 0032 6168     		ldr	r1, [r4, #4]
 1782 0034 FFF7FEFF 		bl	lv_memset_00
 1783              	.LVL219:
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1784              		.loc 1 304 5 view .LVU567
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1785              		.loc 1 304 29 is_stmt 0 view .LVU568
 1786 0038 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1787 003a 6FF34713 		bfc	r3, #5, #3
 1788 003e 2370     		strb	r3, [r4]
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1789              		.loc 1 305 5 is_stmt 1 view .LVU569
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1790              		.loc 1 305 19 is_stmt 0 view .LVU570
 1791 0040 2368     		ldr	r3, [r4]
 1792 0042 67F39423 		bfi	r3, r7, #10, #11
 1793 0046 2360     		str	r3, [r4]
 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1794              		.loc 1 306 5 is_stmt 1 view .LVU571
 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1795              		.loc 1 306 19 is_stmt 0 view .LVU572
 1796 0048 6388     		ldrh	r3, [r4, #2]
 1797 004a 66F34F13 		bfi	r3, r6, #5, #11
 1798 004e 6380     		strh	r3, [r4, #2]	@ movhi
 307:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1799              		.loc 1 307 5 is_stmt 1 view .LVU573
 307:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1800              		.loc 1 307 20 is_stmt 0 view .LVU574
 1801 0050 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1802 0052 65F30403 		bfi	r3, r5, #0, #5
 1803 0056 2370     		strb	r3, [r4]
 308:lvgl/src/draw/lv_img_buf.c **** }
 1804              		.loc 1 308 5 is_stmt 1 view .LVU575
 1805              	.LVL220:
 1806              	.L101:
 309:lvgl/src/draw/lv_img_buf.c **** 
 1807              		.loc 1 309 1 is_stmt 0 view .LVU576
 1808 0058 2046     		mov	r0, r4
 1809 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1810              	.LVL221:
 1811              	.L106:
 291:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1812              		.loc 1 291 9 is_stmt 1 view .LVU577
 1813 005e 2046     		mov	r0, r4
 1814 0060 FFF7FEFF 		bl	lv_mem_free
 1815              	.LVL222:
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1816              		.loc 1 292 9 view .LVU578
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1817              		.loc 1 292 16 is_stmt 0 view .LVU579
 1818 0064 0024     		movs	r4, #0
 1819              	.LVL223:
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1820              		.loc 1 292 16 view .LVU580
 1821 0066 F7E7     		b	.L101
 1822              	.LVL224:
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 62


 1823              	.L107:
 298:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1824              		.loc 1 298 9 is_stmt 1 view .LVU581
 1825 0068 2046     		mov	r0, r4
 1826 006a FFF7FEFF 		bl	lv_mem_free
 1827              	.LVL225:
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1828              		.loc 1 299 9 view .LVU582
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1829              		.loc 1 299 16 is_stmt 0 view .LVU583
 1830 006e 4446     		mov	r4, r8
 1831              	.LVL226:
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1832              		.loc 1 299 16 view .LVU584
 1833 0070 F2E7     		b	.L101
 1834              		.cfi_endproc
 1835              	.LFE59:
 1837              		.section	.text._lv_img_buf_get_transformed_area,"ax",%progbits
 1838              		.align	1
 1839              		.global	_lv_img_buf_get_transformed_area
 1840              		.syntax unified
 1841              		.thumb
 1842              		.thumb_func
 1844              	_lv_img_buf_get_transformed_area:
 1845              	.LVL227:
 1846              	.LFB62:
 351:lvgl/src/draw/lv_img_buf.c **** 
 352:lvgl/src/draw/lv_img_buf.c **** void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, u
 353:lvgl/src/draw/lv_img_buf.c ****                                       const lv_point_t * pivot)
 354:lvgl/src/draw/lv_img_buf.c **** {
 1847              		.loc 1 354 1 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 8, pretend = 0, frame = 16
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		.loc 1 354 1 is_stmt 0 view .LVU586
 1852 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1853              	.LCFI19:
 1854              		.cfi_def_cfa_offset 20
 1855              		.cfi_offset 4, -20
 1856              		.cfi_offset 5, -16
 1857              		.cfi_offset 6, -12
 1858              		.cfi_offset 7, -8
 1859              		.cfi_offset 14, -4
 1860 0002 85B0     		sub	sp, sp, #20
 1861              	.LCFI20:
 1862              		.cfi_def_cfa_offset 40
 1863 0004 0446     		mov	r4, r0
 1864 0006 BDF82850 		ldrh	r5, [sp, #40]
 1865 000a 0B9F     		ldr	r7, [sp, #44]
 355:lvgl/src/draw/lv_img_buf.c **** #if LV_DRAW_COMPLEX
 356:lvgl/src/draw/lv_img_buf.c ****     if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 1866              		.loc 1 356 5 is_stmt 1 view .LVU587
 1867              		.loc 1 356 7 is_stmt 0 view .LVU588
 1868 000c 1E46     		mov	r6, r3
 1869 000e 13B9     		cbnz	r3, .L109
 1870              		.loc 1 356 19 discriminator 1 view .LVU589
 1871 0010 B5F5807F 		cmp	r5, #256
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 63


 1872 0014 6ED0     		beq	.L112
 1873              	.L109:
 357:lvgl/src/draw/lv_img_buf.c ****         res->x1 = 0;
 358:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 359:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 360:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 361:lvgl/src/draw/lv_img_buf.c ****         return;
 362:lvgl/src/draw/lv_img_buf.c ****     }
 363:lvgl/src/draw/lv_img_buf.c **** 
 364:lvgl/src/draw/lv_img_buf.c ****     lv_point_t p[4] = {
 1874              		.loc 1 364 5 is_stmt 1 view .LVU590
 1875              		.loc 1 364 16 is_stmt 0 view .LVU591
 1876 0016 0023     		movs	r3, #0
 1877              	.LVL228:
 1878              		.loc 1 364 16 view .LVU592
 1879 0018 ADF80030 		strh	r3, [sp]	@ movhi
 1880 001c ADF80230 		strh	r3, [sp, #2]	@ movhi
 1881 0020 ADF80410 		strh	r1, [sp, #4]	@ movhi
 1882 0024 ADF80630 		strh	r3, [sp, #6]	@ movhi
 1883 0028 ADF80830 		strh	r3, [sp, #8]	@ movhi
 1884 002c ADF80A20 		strh	r2, [sp, #10]	@ movhi
 1885 0030 ADF80C10 		strh	r1, [sp, #12]	@ movhi
 1886 0034 ADF80E20 		strh	r2, [sp, #14]	@ movhi
 365:lvgl/src/draw/lv_img_buf.c ****         {0, 0},
 366:lvgl/src/draw/lv_img_buf.c ****         {w, 0},
 367:lvgl/src/draw/lv_img_buf.c ****         {0, h},
 368:lvgl/src/draw/lv_img_buf.c ****         {w, h},
 369:lvgl/src/draw/lv_img_buf.c ****     };
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[0], angle, zoom, pivot);
 1887              		.loc 1 370 5 is_stmt 1 view .LVU593
 1888 0038 3B46     		mov	r3, r7
 1889 003a 2A46     		mov	r2, r5
 1890              	.LVL229:
 1891              		.loc 1 370 5 is_stmt 0 view .LVU594
 1892 003c 3146     		mov	r1, r6
 1893              	.LVL230:
 1894              		.loc 1 370 5 view .LVU595
 1895 003e 6846     		mov	r0, sp
 1896              	.LVL231:
 1897              		.loc 1 370 5 view .LVU596
 1898 0040 FFF7FEFF 		bl	lv_point_transform
 1899              	.LVL232:
 371:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 1900              		.loc 1 371 5 is_stmt 1 view .LVU597
 1901 0044 3B46     		mov	r3, r7
 1902 0046 2A46     		mov	r2, r5
 1903 0048 3146     		mov	r1, r6
 1904 004a 01A8     		add	r0, sp, #4
 1905 004c FFF7FEFF 		bl	lv_point_transform
 1906              	.LVL233:
 372:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[2], angle, zoom, pivot);
 1907              		.loc 1 372 5 view .LVU598
 1908 0050 3B46     		mov	r3, r7
 1909 0052 2A46     		mov	r2, r5
 1910 0054 3146     		mov	r1, r6
 1911 0056 02A8     		add	r0, sp, #8
 1912 0058 FFF7FEFF 		bl	lv_point_transform
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 64


 1913              	.LVL234:
 373:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[3], angle, zoom, pivot);
 1914              		.loc 1 373 5 view .LVU599
 1915 005c 3B46     		mov	r3, r7
 1916 005e 2A46     		mov	r2, r5
 1917 0060 3146     		mov	r1, r6
 1918 0062 03A8     		add	r0, sp, #12
 1919 0064 FFF7FEFF 		bl	lv_point_transform
 1920              	.LVL235:
 374:lvgl/src/draw/lv_img_buf.c ****     res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 1921              		.loc 1 374 5 view .LVU600
 1922              		.loc 1 374 15 is_stmt 0 view .LVU601
 1923 0068 BDF90C30 		ldrsh	r3, [sp, #12]
 1924 006c BDF90850 		ldrsh	r5, [sp, #8]
 1925 0070 1A46     		mov	r2, r3
 1926 0072 AB42     		cmp	r3, r5
 1927 0074 A8BF     		it	ge
 1928 0076 2A46     		movge	r2, r5
 1929 0078 BDF90410 		ldrsh	r1, [sp, #4]
 1930 007c BDF90000 		ldrsh	r0, [sp]
 1931 0080 0E46     		mov	r6, r1
 1932 0082 8142     		cmp	r1, r0
 1933 0084 A8BF     		it	ge
 1934 0086 0646     		movge	r6, r0
 1935 0088 B242     		cmp	r2, r6
 1936 008a A8BF     		it	ge
 1937 008c 3246     		movge	r2, r6
 1938 008e 92B2     		uxth	r2, r2
 1939              		.loc 1 374 55 view .LVU602
 1940 0090 023A     		subs	r2, r2, #2
 1941              		.loc 1 374 13 view .LVU603
 1942 0092 2280     		strh	r2, [r4]	@ movhi
 375:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 1943              		.loc 1 375 5 is_stmt 1 view .LVU604
 1944              		.loc 1 375 15 is_stmt 0 view .LVU605
 1945 0094 AB42     		cmp	r3, r5
 1946 0096 B8BF     		it	lt
 1947 0098 2B46     		movlt	r3, r5
 1948 009a 8142     		cmp	r1, r0
 1949 009c B8BF     		it	lt
 1950 009e 0146     		movlt	r1, r0
 1951 00a0 8B42     		cmp	r3, r1
 1952 00a2 B8BF     		it	lt
 1953 00a4 0B46     		movlt	r3, r1
 1954 00a6 9BB2     		uxth	r3, r3
 1955              		.loc 1 375 55 view .LVU606
 1956 00a8 0233     		adds	r3, r3, #2
 1957              		.loc 1 375 13 view .LVU607
 1958 00aa A380     		strh	r3, [r4, #4]	@ movhi
 376:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 1959              		.loc 1 376 5 is_stmt 1 view .LVU608
 1960              		.loc 1 376 15 is_stmt 0 view .LVU609
 1961 00ac BDF90E30 		ldrsh	r3, [sp, #14]
 1962 00b0 BDF90A50 		ldrsh	r5, [sp, #10]
 1963 00b4 1A46     		mov	r2, r3
 1964 00b6 AB42     		cmp	r3, r5
 1965 00b8 A8BF     		it	ge
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 65


 1966 00ba 2A46     		movge	r2, r5
 1967 00bc BDF90610 		ldrsh	r1, [sp, #6]
 1968 00c0 BDF90200 		ldrsh	r0, [sp, #2]
 1969 00c4 0E46     		mov	r6, r1
 1970 00c6 8142     		cmp	r1, r0
 1971 00c8 A8BF     		it	ge
 1972 00ca 0646     		movge	r6, r0
 1973 00cc B242     		cmp	r2, r6
 1974 00ce A8BF     		it	ge
 1975 00d0 3246     		movge	r2, r6
 1976 00d2 92B2     		uxth	r2, r2
 1977              		.loc 1 376 55 view .LVU610
 1978 00d4 023A     		subs	r2, r2, #2
 1979              		.loc 1 376 13 view .LVU611
 1980 00d6 6280     		strh	r2, [r4, #2]	@ movhi
 377:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 1981              		.loc 1 377 5 is_stmt 1 view .LVU612
 1982              		.loc 1 377 15 is_stmt 0 view .LVU613
 1983 00d8 AB42     		cmp	r3, r5
 1984 00da B8BF     		it	lt
 1985 00dc 2B46     		movlt	r3, r5
 1986 00de 8142     		cmp	r1, r0
 1987 00e0 B8BF     		it	lt
 1988 00e2 0146     		movlt	r1, r0
 1989 00e4 8B42     		cmp	r3, r1
 1990 00e6 B8BF     		it	lt
 1991 00e8 0B46     		movlt	r3, r1
 1992 00ea 9BB2     		uxth	r3, r3
 1993              		.loc 1 377 55 view .LVU614
 1994 00ec 0233     		adds	r3, r3, #2
 1995              		.loc 1 377 13 view .LVU615
 1996 00ee E380     		strh	r3, [r4, #6]	@ movhi
 1997              	.L108:
 378:lvgl/src/draw/lv_img_buf.c **** 
 379:lvgl/src/draw/lv_img_buf.c **** #else
 380:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(angle);
 381:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(zoom);
 382:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(pivot);
 383:lvgl/src/draw/lv_img_buf.c ****     res->x1 = 0;
 384:lvgl/src/draw/lv_img_buf.c ****     res->y1 = 0;
 385:lvgl/src/draw/lv_img_buf.c ****     res->x2 = w - 1;
 386:lvgl/src/draw/lv_img_buf.c ****     res->y2 = h - 1;
 387:lvgl/src/draw/lv_img_buf.c **** #endif
 388:lvgl/src/draw/lv_img_buf.c **** }
 1998              		.loc 1 388 1 view .LVU616
 1999 00f0 05B0     		add	sp, sp, #20
 2000              	.LCFI21:
 2001              		.cfi_remember_state
 2002              		.cfi_def_cfa_offset 20
 2003              		@ sp needed
 2004 00f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2005              	.LVL236:
 2006              	.L112:
 2007              	.LCFI22:
 2008              		.cfi_restore_state
 357:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 2009              		.loc 1 357 9 is_stmt 1 view .LVU617
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 66


 357:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 2010              		.loc 1 357 17 is_stmt 0 view .LVU618
 2011 00f4 0380     		strh	r3, [r0]	@ movhi
 358:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 2012              		.loc 1 358 9 is_stmt 1 view .LVU619
 358:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 2013              		.loc 1 358 17 is_stmt 0 view .LVU620
 2014 00f6 4380     		strh	r3, [r0, #2]	@ movhi
 359:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2015              		.loc 1 359 9 is_stmt 1 view .LVU621
 359:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2016              		.loc 1 359 21 is_stmt 0 view .LVU622
 2017 00f8 0139     		subs	r1, r1, #1
 2018              	.LVL237:
 359:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2019              		.loc 1 359 17 view .LVU623
 2020 00fa 8180     		strh	r1, [r0, #4]	@ movhi
 360:lvgl/src/draw/lv_img_buf.c ****         return;
 2021              		.loc 1 360 9 is_stmt 1 view .LVU624
 360:lvgl/src/draw/lv_img_buf.c ****         return;
 2022              		.loc 1 360 21 is_stmt 0 view .LVU625
 2023 00fc 013A     		subs	r2, r2, #1
 2024              	.LVL238:
 360:lvgl/src/draw/lv_img_buf.c ****         return;
 2025              		.loc 1 360 17 view .LVU626
 2026 00fe C280     		strh	r2, [r0, #6]	@ movhi
 361:lvgl/src/draw/lv_img_buf.c ****     }
 2027              		.loc 1 361 9 is_stmt 1 view .LVU627
 2028 0100 F6E7     		b	.L108
 2029              		.cfi_endproc
 2030              	.LFE62:
 2032              		.section	.rodata
 2033              		.align	2
 2034              		.set	.LANCHOR0,. + 0
 2035              	.LC0:
 2036 0000 00112233 		.ascii	"\000\021\"3DUfw\210\231\252\273\314\335\356\377"
 2036      44556677 
 2036      8899AABB 
 2036      CCDDEEFF 
 2037              		.text
 2038              	.Letext0:
 2039              		.file 4 "/usr/local/include/arm/_types.h"
 2040              		.file 5 "/usr/local/include/sys/_types/_int16_t.h"
 2041              		.file 6 "/usr/local/include/sys/_types/_int32_t.h"
 2042              		.file 7 "/usr/local/include/sys/_types/_size_t.h"
 2043              		.file 8 "/usr/local/include/_types/_uint8_t.h"
 2044              		.file 9 "/usr/local/include/_types/_uint16_t.h"
 2045              		.file 10 "/usr/local/include/_types/_uint32_t.h"
 2046              		.file 11 "lvgl/src/draw/../misc/lv_area.h"
 2047              		.file 12 "lvgl/src/draw/lv_img_buf.h"
 2048              		.file 13 "lvgl/src/draw/lv_draw_img.h"
ARM GAS  /var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 lv_img_buf.c
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:21     .text.lv_color_to32:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:26     .text.lv_color_to32:00000000 lv_color_to32
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:72     .text.lv_img_buf_get_px_color:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:78     .text.lv_img_buf_get_px_color:00000000 lv_img_buf_get_px_color
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:142    .text.lv_img_buf_get_px_color:0000003c $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:158    .text.lv_img_buf_get_px_color:0000004c $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:408    .text.lv_img_buf_get_px_alpha:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:414    .text.lv_img_buf_get_px_alpha:00000000 lv_img_buf_get_px_alpha
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:453    .text.lv_img_buf_get_px_alpha:00000020 $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:457    .text.lv_img_buf_get_px_alpha:00000024 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:681    .text.lv_img_buf_get_px_alpha:000000f0 $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:687    .text.lv_img_buf_set_px_alpha:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:693    .text.lv_img_buf_set_px_alpha:00000000 lv_img_buf_set_px_alpha
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:732    .text.lv_img_buf_set_px_alpha:0000002c $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:736    .text.lv_img_buf_set_px_alpha:00000030 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:959    .text.lv_img_buf_set_px_color:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:965    .text.lv_img_buf_set_px_color:00000000 lv_img_buf_set_px_color
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1005   .text.lv_img_buf_set_px_color:00000024 $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1011   .text.lv_img_buf_set_px_color:0000002a $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1349   .text.lv_img_buf_set_palette:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1355   .text.lv_img_buf_set_palette:00000000 lv_img_buf_set_palette
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1479   .text.lv_img_buf_free:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1485   .text.lv_img_buf_free:00000000 lv_img_buf_free
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1530   .text.lv_img_buf_get_img_size:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1536   .text.lv_img_buf_get_img_size:00000000 lv_img_buf_get_img_size
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1552   .text.lv_img_buf_get_img_size:0000000a $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1717   .text.lv_img_buf_alloc:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1723   .text.lv_img_buf_alloc:00000000 lv_img_buf_alloc
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1838   .text._lv_img_buf_get_transformed_area:00000000 $t
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1844   .text._lv_img_buf_get_transformed_area:00000000 _lv_img_buf_get_transformed_area
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:2033   .rodata:00000000 $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1569   .text.lv_img_buf_get_img_size:0000001b $d
/var/folders/21/t9g5rlb91ys800n5npymflf80000gn/T//ccqCDIOn.s:1569   .text.lv_img_buf_get_img_size:0000001c $t

UNDEFINED SYMBOLS
lv_img_cf_get_px_size
lv_mem_free
lv_mem_alloc
lv_memset_00
lv_point_transform
